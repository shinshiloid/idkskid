------------------------------------ TY WRREXK ------------------------------------
repeat wait() until game:IsLoaded()
local LoadingTime = tick();

LPH_NO_VIRTUALIZE = function(a) return a end
LPH_NO_UPVALUES = function(a) return a end

if game.ReplicatedFirst:FindFirstChild("Session") then
    game.ReplicatedFirst.Session:Destroy()
end
if game.Players.localPlayer.PlayerScripts:FindFirstChild("scapter") then
    game.Players.localPlayer.PlayerScripts.scapter:Destroy()
end

local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
local oldIndex = mt.__index
local oldNewIndex = mt.__newindex
setreadonly(mt, false)

mt.__namecall = function(self, ...)
    local method = tostring(getnamecallmethod())
    local args = {...}

    if method == "Kick" then
        return
    end
    if method == "FireServer" then
        if string.len(self.Name) == 38 then
            return
        elseif self.Name == "Hugh" then
            return
        elseif self.Name == "Moolah" then
            return
        end
    end
    if method == "InvokeServer" then
        if self.Name == "Moolah" then
            return
        elseif self.Name == "Hugh" then
            return
        end
    end
    return oldNamecall(self, ...)
end

mt.__newindex = function(self, i, v)
    return oldNewIndex(self, i, v)
end
------------------------------------ REPO ------------------------------------
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
------------------------------------ LINKS ------------------------------------
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ExyNahdfsd/dxgs/refs/heads/main/SaveManager"))()

if not isfolder("enternalcheats//main/enternalcheats") then
    makefolder("enternalcheats/main/enternalcheats")
end

Library:Notify('Loading...');
wait(1)
------------------------------------ WINDOW -----------------------------------
local Window = Library:CreateWindow({
    Title = 'Counter Blox | EnternalCheats',
    Center = true, 
    AutoShow = true,
})
------------------------------------ TABS ------------------------------------
local Tabs = {
    Legitbot = Window:AddTab('Aimbot'),
    Rage = Window:AddTab('Rage'),
    Visuals = Window:AddTab('Visuals'),
    Misc = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('Settings')
}
------------------------------------ SECTIONS ------------------------------------
local AimbotSec1 = Tabs.Legitbot:AddLeftGroupbox('Bullet Redirection')
local AimbotSec2 = Tabs.Legitbot:AddRightGroupbox('Aim Assist')

local RageSec1 = Tabs.Rage:AddLeftGroupbox('Anti-Aim')
local RageSec2 = Tabs.Rage:AddRightGroupbox('Fake Lag')

local ESPTabbox = Tabs.Visuals:AddLeftTabbox()
local ESPTab  = ESPTabbox:AddTab('ESP')
local ESPSTab = Tabs.Visuals:AddLeftGroupbox('ESP Settings')
local LocalTab = ESPTabbox:AddTab('Local')

local CameraTabbox = Tabs.Visuals:AddRightTabbox()
local CamTab  = CameraTabbox:AddTab('Client')
local VWTab = CameraTabbox:AddTab('Viewmodel')

local MiscTabbox = Tabs.Visuals:AddRightTabbox()
local WRLTab  = MiscTabbox:AddTab('World')
local MiscTab  = MiscTabbox:AddTab('Misc')
local BulletsTab = MiscTabbox:AddTab('Bullet')

local MiscSec1 = Tabs.Misc:AddLeftGroupbox('Main')
local MiscSec2 = Tabs.Misc:AddLeftGroupbox('Movement')
local MiscSec3 = Tabs.Misc:AddRightGroupbox('Tweaks')
local MiscSec4 = Tabs.Misc:AddRightGroupbox('Hit')
local MiscSec5 = Tabs.Misc:AddRightGroupbox('Others')
local MiscSec6 = Tabs.Misc:AddLeftGroupbox('Gun Mods')

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

------------------------------------ VARS ------------------------------------
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local workspace = game:GetService("Workspace")
local currentCamera = workspace.CurrentCamera
local guiService = game:GetService("GuiService")
local runService = game:GetService("RunService")
local lighting = game.Lighting
local kryxluaScripts = {}
local mouse = localPlayer:GetMouse()
local userInput = game:GetService('UserInputService')
local TweenService = game:GetService("TweenService")
local rayignore = workspace.Ray_Ignore
local CNew, CF, C3, Vec2, Vec3 = ColorSequence.new, CFrame.new, Color3.fromRGB, Vector2.new, Vector3.new
local GetPlayers = players.GetPlayers
local cbClient = getsenv(localPlayer.PlayerGui:WaitForChild("Client"))
local Silk = Font.new("rbxassetid://12187371840")
local debris = game:GetService("Workspace").Debris
local spectatorLabel = nil
local FakelagFolder = Instance.new("Folder", workspace)
FakelagFolder.Name = "Fakelag"
local LagTick = 0
local lagVisuals = {}
local playerPingData = {}
local fakelagEnabled = false
local pingSpikeActive = false
local GetIcon = require(game.ReplicatedStorage.GetIcon)
local atmosphere = Instance.new("Atmosphere", lighting)
atmosphere.Parent = nil
atmosphere.Density = 0
atmosphere.Offset = 0
atmosphere.Haze = 0
atmosphere.Glare = 0
atmosphere.Color = Color3.fromRGB(199, 199, 199)
atmosphere.Decay = Color3.fromRGB(199, 199, 199)

local materialColor = {
    enabled = false,
    color = C3(200, 200, 200),
    material = Enum.Material.SmoothPlastic,
    appliedMaps = {}
}
local bulletTracers = {
    enabled = false,
    trail = nil,
    defaultTrail = nil
}
local weaponTracers = {
    enabled = false,
    weapons = {"AWP", "Scout", "USP", "G3SG1", "M4A1"}
}

local originalWeaponValues = {}
local gunModsEnabled = {
    no_spread = false,
    no_recoil = false, 
    fast_firerate = false,
    infinity_ammo = false
}

local spinbot = {
    enabled = false,
    speed = 150,
}

local lookAtCamera = {
    enabled = false
}

local antiaim = {
    enabled = false,
    type = "Spin",
    direction = "Backward", 
    speed = 50,
    enabled = false,
    jitter = false,
    jitter_toggle = false,
    spin_angle = 0,
    last_jitter_time = 0,
    jitter_speed = 0.1
}

local textOutline = {
    enabled = false,
    color = C3(0, 0, 0),
    thickness = 1
}

local skeletonESP = {
    enabled = false,
    color = C3(255, 255, 255),
    thickness = 1,
    transparency = 0
}

local skeletons = {}

local globalChams = {
    enabled = false,
    team = true,
    me = false,
    teamColor = C3(0, 100, 255),
    enemyColor = C3(255, 0, 0),
    meColor = C3(255, 255, 255) 
}

local grenadeESP = {
    enabled = false,
    settings = {
        background = {color = C3(0.1, 0.1, 0.1), transparency = 0},
        outline = {color = C3(0, 0, 0), thickness = 2, enabled = true},
        icon = {color = C3(0, 0, 0), size = 1.0, enabled = true},
        text = {enabled = true, color = C3(0, 0, 0), size = 14},
        circle = {size = 12, scale_min = 40, scale_max = 80}
    }
}

local grenadeTypes = {
    ["2465359739"] = {name = "Smoke", icon = "5862001893", iconScale = 1.6},
    ["2472169712"] = {name = "Flashbang", icon = "5862001535", iconScale = 1.6},
    ["2473861397"] = {name = "HE Grenade", icon = "469548318", iconScale = 1.4},
    ["2465357373"] = {name = "Molotov", icon = "5862001832", iconScale = 1.5},
    ["1802667782"] = {name = "Decoy", icon = "5862001463", iconScale = 1.6},
    ["2465356425"] = {name = "Incendiary Grenade", icon = "5862001717", iconScale = 1.6}
}

local grenadeCircles = {}
local trackedGrenades = {}

local function toggleWeaponTracers(enabled)
    local value = enabled and 1 or 0
    
    for _, weaponName in ipairs(weaponTracers.weapons) do
        local weapon = game:GetService("ReplicatedStorage").Weapons:FindFirstChild(weaponName)
        if weapon then
            local bulletPerTrail = weapon:FindFirstChild("BulletPerTrail")
            if bulletPerTrail then
                bulletPerTrail.Value = value
            end
        end
    end
end

local function applyWeaponTracers()
    toggleWeaponTracers(weaponTracers.enabled)
end

local function setupBulletTracer()
    local visualizeModule = game:GetService("ReplicatedStorage"):FindFirstChild("VisualizeModule")
    if not visualizeModule then return end
    
    bulletTracers.defaultTrail = visualizeModule:FindFirstChild("Trail")
    if not bulletTracers.defaultTrail then return end
    
    bulletTracers.trail = bulletTracers.defaultTrail:Clone()
    bulletTracers.trail.Name = "CustomTrail"

    bulletTracers.trail.Texture = ""
    bulletTracers.trail.Lifetime = 1.0
    bulletTracers.trail.MaxLength = 99999
    
    local whiteColor = Color3.new(1, 1, 1)
    bulletTracers.trail.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, whiteColor),
        ColorSequenceKeypoint.new(1, whiteColor)
    })
    
    bulletTracers.trail.WidthScale = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.03),
        NumberSequenceKeypoint.new(1, 0.03)
    })
end

setupBulletTracer()

local function applyBulletTracerSettings()
    if not bulletTracers.trail then return end
    
    if bulletTracers.enabled then
        local visualizeModule = game:GetService("ReplicatedStorage"):FindFirstChild("VisualizeModule")
        if visualizeModule then
            local originalTrail = visualizeModule:FindFirstChild("Trail")
            if originalTrail then
                originalTrail.Parent = nil
            end
            bulletTracers.trail.Parent = visualizeModule
            bulletTracers.trail.Name = "Trail"
        end
    else
        local visualizeModule = game:GetService("ReplicatedStorage"):FindFirstChild("VisualizeModule")
        if visualizeModule then
            local customTrail = visualizeModule:FindFirstChild("Trail")
            if customTrail then
                customTrail.Parent = nil
            end
            if bulletTracers.defaultTrail then
                bulletTracers.defaultTrail.Parent = visualizeModule
            end
        end
    end
end

local function updateTrailColor(color)
    if not bulletTracers.trail then return end
    
    bulletTracers.trail.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, color),
        ColorSequenceKeypoint.new(1, color)
    })
end

local function updateTrailLifetime(time)
    if not bulletTracers.trail then return end
    bulletTracers.trail.Lifetime = time
end

local function updateTrailWidth(width)
    if not bulletTracers.trail then return end
    
    bulletTracers.trail.WidthScale = NumberSequence.new({
        NumberSequenceKeypoint.new(0, width),
        NumberSequenceKeypoint.new(1, width)
    })
end

spawn(function()
    while true do
        wait(1)
        if bulletTracers.enabled then
            applyBulletTracerSettings()
        end
    end
end)

local weaponIcons = {
    ["Glock"] = "rbxassetid://430080758",
    ["P2000"] = "rbxassetid://1784884358",
    ["MAG7"] = "rbxassetid://1784890670",
    ["C4"] = "rbxassetid://1784886738",
    ["Negev"] = "rbxassetid://960099089",
    ["P90"] = "rbxassetid://1784889308",
    ["P250"] = "rbxassetid://1784889951",
    ["SawedOff"] = "rbxassetid://1784890224",
    ["SCAR-20"] = "rbxassetid://1784891342",
    ["Scout"] = "rbxassetid://464915678",
    ["Tec9"] = "rbxassetid://1784891607",
    ["UMP"] = "rbxassetid://1784892286",
    ["XM"] = "rbxassetid://1784893326",
    ["Golden Knife"] = "rbxassetid://1784894646",
    ["T Knife"] = "rbxassetid://1784892698",
    ["CT Knife"] = "rbxassetid://5862001968",
    ["Gut Knife"] = "rbxassetid://5862001395",
    ["Butterfly Knife"] = "rbxassetid://5862001604",
    ["Karambit"] = "rbxassetid://5862001270",
    ["Huntsman Knife"] = "rbxassetid://5862001782",
    ["Bayonet"] = "rbxassetid://5862001657",
    ["Falchion Knife"] = "rbxassetid://5862001162",
    ["Falchion Classic"] = "rbxassetid://5882210289",
    ["Sickle Classic"] = "rbxassetid://5866449272",
    ["Sickle"] = "rbxassetid://5862001832",
    ["Molotov"] = "rbxassetid://5862001717",
    ["Incendiary Grenade"] = "rbxassetid://5862001535",
    ["Flashbang"] = "rbxassetid://5862001463",
    ["Decoy Grenade"] = "rbxassetid://5862001218",
    ["Bearded Axe"] = "rbxassetid://5882209166",
    ["Cleaver"] = "rbxassetid://5862001893",
    ["Smoke Grenade"] = "rbxassetid://1784880429",
    ["AUG"] = "rbxassetid://1784892019",
    ["SG"] = "rbxassetid://1784886467",
    ["MAC10"] = "rbxassetid://1784885559",
    ["M4A4"] = "rbxassetid://1784883536",
    ["FiveSeven"] = "rbxassetid://1784883269",
    ["Famas"] = "rbxassetid://464915621",
    ["DualBerettas"] = "rbxassetid://1784881184",
    ["CZ"] = "rbxassetid://1784882993",
    ["DesertEagle"] = "rbxassetid://1784880647",
    ["AWP"] = "rbxassetid://1784880132",
    ["AK47"] = "rbxassetid://1784889624",
    ["HE Grenade"] = "rbxassetid://469548318",
    ["Nova"] = "rbxassetid://1784884618",
    ["Galil"] = "rbxassetid://1784886231",
    ["M249"] = "rbxassetid://1784885275",
    ["M4A1"] = "rbxassetid://1784891026",
    ["R8"] = "rbxassetid://1784887021",
    ["MP7"] = "rbxassetid://12283517102",
    ["MP7-SD"] = "rbxassetid://1784888791",
    ["MP9"] = "rbxassetid://1784883884",
    ["G3SG1"] = "rbxassetid://1784892936",
    ["Bizon"] = "rbxassetid://1784893598",
    ["USP"] = "rbxassetid://966822751",
    ["Kevlar Vest"] = "rbxassetid://966822523",
    ["Zeus"] = "rbxassetid://5862001328",
    ["Defuse Kit"] = "rbxassetid://966822842",
    ["Crowbar"] = "rbxassetid://430080758",
    ["Kevlar + Helmet"] = "rbxassetid://1784884358"
}

local footTrail = {
    Enabled = false,
    Color = Color3.fromRGB(255, 0, 0),
    Width = 0.016,
    Length = 50,
    Lifetime = 5
}

local trailParts = {}
local lastPosition = nil

local bloomEffect = Instance.new("BloomEffect", currentCamera)
bloomEffect.Parent = nil
bloomEffect.Enabled = false
bloomEffect.Intensity = 0.5
bloomEffect.Size = 24
bloomEffect.Threshold = 0.9

local SkyboxesTable = {
    ["Galaxy"] = {
        SkyboxBk = "http://www.roblox.com/asset/?id=159454299",
        SkyboxDn = "http://www.roblox.com/asset/?id=159454296",
        SkyboxFt = "http://www.roblox.com/asset/?id=159454293",
        SkyboxLf = "http://www.roblox.com/asset/?id=159454286",
        SkyboxRt = "http://www.roblox.com/asset/?id=159454300",
        SkyboxUp = "http://www.roblox.com/asset/?id=159454288"
    },
    ["Pink Sky"] = {
        SkyboxLf = "rbxassetid://271042310",
        SkyboxBk = "rbxassetid://271042516",
        SkyboxDn = "rbxassetid://271077243",
        SkyboxFt = "rbxassetid://271042556",
        SkyboxRt = "rbxassetid://271042467",
        SkyboxUp = "rbxassetid://271077958"
    },
    ["Sunset"] = {
        SkyboxBk = "http://www.roblox.com/asset/?id=458016711",
        SkyboxDn = "http://www.roblox.com/asset/?id=458016826",
        SkyboxFt = "http://www.roblox.com/asset/?id=458016532",
        SkyboxLf = "http://www.roblox.com/asset/?id=458016655",
        SkyboxRt = "http://www.roblox.com/asset/?id=458016782",
        SkyboxUp = "http://www.roblox.com/asset/?id=458016792"
    },
    ["Night"] = {
        SkyboxBk = "rbxassetid://48020371",
        SkyboxDn = "rbxassetid://48020144",
        SkyboxFt = "rbxassetid://48020234",
        SkyboxLf = "rbxassetid://48020211",
        SkyboxRt = "rbxassetid://48020254",
        SkyboxUp = "rbxassetid://48020383"
    },
    ["Evening"] = {
        SkyboxLf = "http://www.roblox.com/asset/?id=7950573918",
        SkyboxBk = "http://www.roblox.com/asset/?id=7950569153",
        SkyboxDn = "http://www.roblox.com/asset/?id=7950570785",
        SkyboxFt = "http://www.roblox.com/asset/?id=7950572449",
        SkyboxRt = "http://www.roblox.com/asset/?id=7950575055",
        SkyboxUp = "http://www.roblox.com/asset/?id=7950627627"
    },
    ["Purple Nebula"] = {
        SkyboxBk = "rbxassetid://159454299",
            SkyboxDn = "rbxassetid://159454296",
            SkyboxFt = "rbxassetid://159454293",
            SkyboxLf = "rbxassetid://159454286",
            SkyboxRt = "rbxassetid://159454300",
            SkyboxUp = "rbxassetid://159454288"
    },
    ["Night Sky"] = {
            SkyboxBk = "rbxassetid://12064107",
            SkyboxDn = "rbxassetid://12064152",
            SkyboxFt = "rbxassetid://12064121",
            SkyboxLf = "rbxassetid://12063984",
            SkyboxRt = "rbxassetid://12064115",
            SkyboxUp = "rbxassetid://12064131"
    },
    ["Pink Daylight"] = {
            SkyboxBk = "rbxassetid://271042516",
            SkyboxDn = "rbxassetid://271077243",
            SkyboxFt = "rbxassetid://271042556",
            SkyboxLf = "rbxassetid://271042310",
            SkyboxRt = "rbxassetid://271042467",
            SkyboxUp = "rbxassetid://271077958"
    },
    ["Morning Glow"] = {
            SkyboxBk = "rbxassetid://1417494030",
            SkyboxDn = "rbxassetid://1417494146",
            SkyboxFt = "rbxassetid://1417494253",
            SkyboxLf = "rbxassetid://1417494402",
            SkyboxRt = "rbxassetid://1417494499",
            SkyboxUp = "rbxassetid://1417494643"
    },
    ["Setting Sun"] = {
            SkyboxBk = "rbxassetid://626460377",
            SkyboxDn = "rbxassetid://626460216",
            SkyboxFt = "rbxassetid://626460513",
            SkyboxLf = "rbxassetid://626473032",
            SkyboxRt = "rbxassetid://626458639",
            SkyboxUp = "rbxassetid://626460625"
    },
    ["Fade Blue"] = {
            SkyboxBk = "rbxassetid://153695414",
            SkyboxDn = "rbxassetid://153695352",
            SkyboxFt = "rbxassetid://153695452",
            SkyboxLf = "rbxassetid://153695320",
            SkyboxRt = "rbxassetid://153695383",
            SkyboxUp = "rbxassetid://153695471"
    },
    ["Elegant Morning"] = {
            SkyboxBk = "rbxassetid://153767241",
            SkyboxDn = "rbxassetid://153767216",
            SkyboxFt = "rbxassetid://153767266",
            SkyboxLf = "rbxassetid://153767200",
            SkyboxRt = "rbxassetid://153767231",
            SkyboxUp = "rbxassetid://153767288"
    },
    ["Neptune"] = {
            SkyboxBk = "rbxassetid://218955819",
            SkyboxDn = "rbxassetid://218953419",
            SkyboxFt = "rbxassetid://218954524",
            SkyboxLf = "rbxassetid://218958493",
            SkyboxRt = "rbxassetid://218957134",
            SkyboxUp = "rbxassetid://218950090"
    },
    ["Redshift"] = {
            SkyboxBk = "rbxassetid://401664839",
            SkyboxDn = "rbxassetid://401664862",
            SkyboxFt = "rbxassetid://401664960",
            SkyboxLf = "rbxassetid://401664881",
            SkyboxRt = "rbxassetid://401664901",
            SkyboxUp = "rbxassetid://401664936"
    },
    ["Aesthetic Night"] = {
            SkyboxBk = "rbxassetid://1045964490",
            SkyboxDn = "rbxassetid://1045964368",
            SkyboxFt = "rbxassetid://1045964655",
            SkyboxLf = "rbxassetid://1045964655",
            SkyboxRt = "rbxassetid://1045964655",
            SkyboxUp = "rbxassetid://1045962969"
     }
}

local saturationeffect = Instance.new("ColorCorrectionEffect", currentCamera)
saturationeffect.Parent = nil
saturationeffect.Enabled = false
local Blur = Instance.new("BlurEffect", currentCamera)
Blur.Enabled = false

local bullettracerstexture = 0

local ebCooldown = false
local oldState = Enum.HumanoidStateType.None
local ebenabled = false
local ebsfx = 6887181639
local timeout = 0
local ebcount = 0
local graphLines = {}
local lastPos = currentCamera.ViewportSize.Y-90

local function ApplyGunMods()
    local weapons = {"AK47", "AUG", "AWP", "Bizon", "CZ", "DesertEagle", "DualBerettas", 
                    "Famas", "FiveSeven", "G3SG1", "Galil", "Glock", "M249", "M4A1", 
                    "M4A4", "MAC10", "Mag7", "MP7", "MP7-SD", "MP9", "Negev", "Nova", 
                    "P2000", "P250", "P90", "R8", "SG", "SawedOff", "Scout", "Tec9", 
                    "UMP", "USP", "XM"}
    
    for _, weaponName in ipairs(weapons) do
        local weapon = game:GetService("ReplicatedStorage").Weapons:FindFirstChild(weaponName)
        if weapon then
            if not originalWeaponValues[weaponName] then
                originalWeaponValues[weaponName] = {}
                
                local spread = weapon:FindFirstChild("Spread")
                if spread then
                    originalWeaponValues[weaponName].spread = spread.Value
                    for _, child in ipairs(spread:GetChildren()) do
                        if child:IsA("NumberValue") and child.Name ~= "Recoil" then
                            originalWeaponValues[weaponName][child.Name] = child.Value
                        end
                    end
                end
                
                local recoil = weapon:FindFirstChild("Spread") and weapon.Spread:FindFirstChild("Recoil")
                if recoil then
                    originalWeaponValues[weaponName].recoil = recoil.Value
                end
                
                local fireRate = weapon:FindFirstChild("FireRate")
                if fireRate then
                    originalWeaponValues[weaponName].fireRate = fireRate.Value
                end
                
                local storedAmmo = weapon:FindFirstChild("StoredAmmo")
                local ammo = weapon:FindFirstChild("Ammo")
                if storedAmmo then originalWeaponValues[weaponName].storedAmmo = storedAmmo.Value end
                if ammo then originalWeaponValues[weaponName].ammo = ammo.Value end
            end
            
            local original = originalWeaponValues[weaponName]
            
            local spread = weapon:FindFirstChild("Spread")
            if spread then
                if Toggles.mod_nospread.Value then
                    spread.Value = 0
                    for _, child in ipairs(spread:GetChildren()) do
                        if child:IsA("NumberValue") and child.Name ~= "Recoil" then
                            child.Value = 0
                        end
                    end
                else
                    spread.Value = original.spread or spread.Value
                    for _, child in ipairs(spread:GetChildren()) do
                        if child:IsA("NumberValue") and child.Name ~= "Recoil" then
                            child.Value = original[child.Name] or child.Value
                        end
                    end
                end
            end
            
            local recoil = weapon:FindFirstChild("Spread") and weapon.Spread:FindFirstChild("Recoil")
            if recoil then
                if Toggles.mod_norecoil.Value then
                    recoil.Value = 0
                else
                    recoil.Value = original.recoil or recoil.Value
                end
            end
            
            local fireRate = weapon:FindFirstChild("FireRate")
            if fireRate then
                if Toggles.mod_fastfire.Value then
                    fireRate.Value = 0
                else
                    fireRate.Value = original.fireRate or fireRate.Value
                end
            end
            
            local storedAmmo = weapon:FindFirstChild("StoredAmmo")
            local ammo = weapon:FindFirstChild("Ammo")
            if storedAmmo and ammo then
                if Toggles.mod_infammo.Value then
                    storedAmmo.Value = 99999
                    ammo.Value = 99999
                else
                    storedAmmo.Value = original.storedAmmo or storedAmmo.Value
                    ammo.Value = original.ammo or ammo.Value
                end
            end
        end
    end
end

------------------------------------ GUI STUFF ------------------------------------
local watermark = Instance.new("ScreenGui")
local ScreenLabel = Instance.new("Frame")
local WatermarkColor = Instance.new("Frame")
local UIGradient = Instance.new("UIGradient")
local Container = Instance.new("Frame")
local UIPadding = Instance.new("UIPadding")
local Text = Instance.new("TextLabel")
local Background = Instance.new("Frame")

local spectatorGUI = Instance.new("ScreenGui")
spectatorGUI.Name = "SpectatorGUI"
spectatorGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
spectatorGUI.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame", spectatorGUI)
mainFrame.BorderSizePixel = 0
mainFrame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
mainFrame.Size = UDim2.new(0, 197, 0, 26)
mainFrame.Position = UDim2.new(0.26, 0, 0.44, 0)
mainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)

local whiteBar = Instance.new("Frame", mainFrame)
whiteBar.BorderSizePixel = 0
whiteBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
whiteBar.Size = UDim2.new(0, 190, 0, 2)
whiteBar.Position = UDim2.new(0.01523, 0, -0.04, 4)
whiteBar.BorderColor3 = Color3.fromRGB(0, 0, 0)

local titleLabel = Instance.new("TextLabel", mainFrame)
titleLabel.Interactable = false
titleLabel.BorderSizePixel = 0
titleLabel.AutoLocalize = false
titleLabel.TextSize = 16
titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.FontFace = Font.new("rbxasset://fonts/families/Arimo.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.BackgroundTransparency = 1
titleLabel.Size = UDim2.new(0, 198, 0, 26)
titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
titleLabel.Text = "Spectators: 0"
titleLabel.Position = UDim2.new(0, 0, 0, 2)
titleLabel.TextXAlignment = Enum.TextXAlignment.Center

local function GetSpectators()
    local CurrentSpectators = {}
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do 
        if player ~= game.Players.LocalPlayer and not player.Character and 
           player:FindFirstChild("CameraCF") and 
           (player.CameraCF.Value.Position - workspace.CurrentCamera.CFrame.p).Magnitude < 10 then 
            table.insert(CurrentSpectators, player)
        end
    end
    return CurrentSpectators
end

local function UpdateSpectatorList()
    if spectatorGUI and spectatorGUI.Parent then
        local spectators = GetSpectators()
        titleLabel.Text = "Spectators: " .. #spectators
    end
end

game:GetService("RunService").RenderStepped:Connect(UpdateSpectatorList)

UpdateSpectatorList()

local function ZWWNPAB_fake_script()
    local script = Instance.new('LocalScript', ScreenLabel)

    local gui = script.Parent
    gui.Draggable = true
    gui.Active = true
end
coroutine.wrap(ZWWNPAB_fake_script)()

local function SJBA_fake_script()
    local script = Instance.new('LocalScript', Frame)
    local gui = script.Parent
    gui.Draggable = true
    gui.Active = true
end

local ebtxt = Drawing.new("Text");ebtxt.Text = "EB";ebtxt.Center = true;ebtxt.Outline = true;ebtxt.Color = C3(255, 255, 255);ebtxt.Font = 3;ebtxt.Position = Vec2(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y - 80);ebtxt.Size = 18;ebtxt.Visible = false;
local ebcounter = Drawing.new("Text");ebcounter.Text = "eb: "..ebcount.."";ebcounter.Center = true;ebcounter.Outline = true;ebcounter.Color = C3(255, 255, 255);ebcounter.Font = 3;ebcounter.Position = Vec2(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y - 50);ebcounter.Size = 18;ebcounter.Visible = false
local VelocityCounter = Drawing.new("Text");VelocityCounter.Text = "";VelocityCounter.Center = true;VelocityCounter.Outline = true;VelocityCounter.Color = Color3.new(1,1,1);VelocityCounter.Font = 3;VelocityCounter.Position = Vec2(currentCamera.ViewportSize.X/2, currentCamera.ViewportSize.Y-70);VelocityCounter.Size = 20;VelocityCounter.Visible = false
------------------------------------ MAIN FUNCS ------------------------------------
local function IsAlive(plr)
    if plr and plr.Character and plr.Character.FindFirstChild(plr.Character, "Humanoid") and plr.Character.Humanoid.Health > 0 then
        return true
    end

    return false
end

function isButtonDown(key)
    if string.find(tostring(key),"KeyCode") then
        return game:GetService("UserInputService"):IsKeyDown(key) 
    else
        for _,v in pairs(game:GetService("UserInputService"):GetMouseButtonsPressed()) do
            if v.UserInputType == key then
                return true
            end
        end
    end
    return false
end

local function mouse1click()
    local mouse = game:GetService("Players").LocalPlayer:GetMouse()
    mouse1press()
    wait(0.05)
    mouse1release()
end

local grenadeVisualizer = {
    enabled = false,
    color = C3(255, 0, 0),
    transparency = 0.5,
    radius = 8
}

local function HEVisualizer()
    if not grenadeVisualizer.enabled then return end
    if not grenadeVisualizer.enabled then
        local debris = workspace:FindFirstChild("Debris")
        if debris then
            for _, obj in pairs(debris:GetChildren()) do
                local visualizer = obj:FindFirstChild("HEVisualizer")
                if visualizer then
                    visualizer:Destroy()
                end
            end
        end
        return
    end
    
    local debris = workspace:FindFirstChild("Debris")
    if not debris then return end
    
    for _, obj in pairs(debris:GetChildren()) do
        if obj.Name == "Model" then
            local innerModel = obj:FindFirstChild("Model")
            if innerModel then
                local handle2 = innerModel:FindFirstChild("Handle2")
                if handle2 and handle2:IsA("MeshPart") then
                    local textureId = tostring(handle2.TextureID)
                    if textureId:find("2473861397") or textureId:find("469548318") then
                        local visualizer = obj:FindFirstChild("HEVisualizer")
                        if not visualizer then
                            visualizer = Instance.new("Part")
                            visualizer.Name = "HEVisualizer"
                            visualizer.Shape = Enum.PartType.Ball
                            visualizer.Size = Vector3.new(grenadeVisualizer.radius * 2, grenadeVisualizer.radius * 2, grenadeVisualizer.radius * 2)
                            visualizer.Material = Enum.Material.Neon
                            visualizer.Color = grenadeVisualizer.color
                            visualizer.Transparency = grenadeVisualizer.transparency
                            visualizer.Anchored = true
                            visualizer.CanCollide = false
                            visualizer.Parent = obj
                            
                            visualizer:SetAttribute("ProtectedPart", true)
                            visualizer:SetAttribute("NoMaterialChange", true)
                            visualizer:SetAttribute("HEGrenadeVisualizer", true)
                            
                            local glow = Instance.new("SurfaceLight")
                            glow.Color = grenadeVisualizer.color
                            glow.Brightness = 2
                            glow.Range = grenadeVisualizer.radius
                            glow.Parent = visualizer
                        else
                            visualizer.Color = grenadeVisualizer.color
                            visualizer.Transparency = grenadeVisualizer.transparency
                            visualizer.Size = Vector3.new(grenadeVisualizer.radius * 2, grenadeVisualizer.radius * 2, grenadeVisualizer.radius * 2)
                            visualizer.Material = Enum.Material.Neon
                            
                            local glow = visualizer:FindFirstChildOfClass("SurfaceLight")
                            if glow then
                                glow.Color = grenadeVisualizer.color
                                glow.Range = grenadeVisualizer.radius
                            end
                        end
                        
                        local mainPart = innerModel:FindFirstChildOfClass("BasePart") or innerModel:FindFirstChildOfClass("MeshPart")
                        if mainPart then
                            visualizer.Position = mainPart.Position
                        end
                    end
                end
            end
        end
    end
    
    for _, obj in pairs(debris:GetChildren()) do
        if obj.Name == "Model" then
            local visualizer = obj:FindFirstChild("HEVisualizer")
            if visualizer and not obj:FindFirstChild("Model") then
                visualizer:Destroy()
            end
        end
    end
end

------------------------------------ NAME CHANGER ------------------------------------
local nameChangerEnabled = false
local originalName = localPlayer.Name

local function SetupNameChanger()
    local Players = game:GetService("Players")
    
    local function getNewName()
        if nameChangerEnabled then
            return getgenv().newname or "t.me/EnternalCheats"
        else
            return originalName
        end
    end
    
    local mt = getrawmetatable(game)
    local __oldNewIndex = mt.__newindex
    setreadonly(mt, false)
    
    mt.__newindex = newcclosure(function(self, k, v)
        local currentName = getNewName()
        if (game.IsA(self, "TextLabel") or game.IsA(self, "TextButton")) and k == "Text" and string.find(tostring(v), originalName) then
            return __oldNewIndex(self, k, string.gsub(tostring(v), originalName, currentName))
        end
        return __oldNewIndex(self, k, v)
    end)
    
    setreadonly(mt, true)
    
    local function patchText(v)
        if v:IsA("TextLabel") or v:IsA("TextButton") then
            local function update()
                local currentName = getNewName()
                v.Text = string.gsub(v.Text, originalName, currentName)
            end
            update()
            v:GetPropertyChangedSignal("Text"):Connect(update)
        end
    end
    
    for _, v in pairs(game:GetDescendants()) do
        patchText(v)
    end
    
    game.DescendantAdded:Connect(patchText)
end

SetupNameChanger()

local function createTrailSegment(startPos, endPos)
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Color = footTrail.Color
    part.Material = Enum.Material.Neon
    part.Size = Vector3.new(footTrail.Width, footTrail.Width, (startPos - endPos).Magnitude)
    part.CFrame = CFrame.new(startPos, endPos) * CFrame.new(0, 0, -part.Size.Z/2)
    part.Parent = workspace
    
    table.insert(trailParts, {
        Part = part,
        Time = os.clock()
    })
    
    return part
end

game:GetService("RunService").Heartbeat:Connect(function()
    if not footTrail.Enabled or not localPlayer.Character then
        lastPosition = nil
        return
    end

    local root = localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local currentPos = root.Position - Vector3.new(0, 2.5, 0)
    
    if lastPosition and (currentPos - lastPosition).Magnitude > 0.1 then
        createTrailSegment(lastPosition, currentPos)
    end
    
    lastPosition = currentPos
    
    local currentTime = os.clock()
    for i = #trailParts, 1, -1 do
        if currentTime - trailParts[i].Time > footTrail.Lifetime then
            trailParts[i].Part:Destroy()
            table.remove(trailParts, i)
        end
    end
    
    while #trailParts > footTrail.Length do
        trailParts[1].Part:Destroy()
        table.remove(trailParts, 1)
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == localPlayer then
        for _, segment in pairs(trailParts) do
            segment.Part:Destroy()
        end
        trailParts = {}
    end
end)
------------------------------------ CHARACTER CHANGER ------------------------------------
local function ChangeCharacter(model)
    local character = localPlayer.Character
    if not character then return end

    for _, item in ipairs(character:GetChildren()) do
        if item:IsA("Accessory") then
            item:Destroy()
        end
    end

    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            local newPart = model:FindFirstChild(part.Name, true)
            if newPart and newPart:IsA("BasePart") then
                part.Color = newPart.Color
                part.Transparency = newPart.Transparency

                local colorVal = Instance.new("Color3Value")
                colorVal.Name = "OriginalColor"
                colorVal.Value = part.Color
                colorVal.Parent = part

                local materialVal = Instance.new("StringValue")
                materialVal.Name = "OriginalMaterial"
                materialVal.Value = tostring(part.Material)
                materialVal.Parent = part
            end
        end
    end

    local head = character:FindFirstChild("Head")
    local newHead = model:FindFirstChild("Head")
    if head and newHead then
        for _, decal in ipairs(head:GetChildren()) do
            if decal:IsA("Decal") then
                decal:Destroy()
            end
        end
        
        for _, newDecal in ipairs(newHead:GetChildren()) do
            if newDecal:IsA("Decal") then
                local clonedDecal = newDecal:Clone()
                clonedDecal.Parent = head
                
                local textureVal = Instance.new("StringValue")
                textureVal.Name = "OriginalFaceTexture"
                textureVal.Value = clonedDecal.Texture
                textureVal.Parent = clonedDecal
            end
        end
    end

    local function copyClothing(className)
        local old = character:FindFirstChildOfClass(className)
        if old then old:Destroy() end

        local new = model:FindFirstChildOfClass(className)
        if new then
            local clone = new:Clone()
            clone.Parent = character

            local value = Instance.new("StringValue")
            value.Name = "OriginalTexture"
            value.Value = clone[className .. "Template"]
            value.Parent = clone
        end
    end

    copyClothing("Shirt")
    copyClothing("Pants")

    for _, accessory in ipairs(model:GetChildren()) do
        if accessory:IsA("Accessory") then
            local cloned = accessory:Clone()
            local handle = cloned:FindFirstChild("Handle")

            if handle then
                for _, weld in ipairs(handle:GetChildren()) do
                    if weld:IsA("Weld") and weld.Part1 then
                        local match = character:FindFirstChild(weld.Part1.Name)
                        if match then
                            weld.Part1 = match
                        end
                    end
                end

                local colorVal = Instance.new("Color3Value")
                colorVal.Name = "OriginalColor"
                colorVal.Value = handle.Color
                colorVal.Parent = handle

                local materialVal = Instance.new("StringValue")
                materialVal.Name = "OriginalMaterial"
                materialVal.Value = tostring(handle.Material)
                materialVal.Parent = handle
            end

            cloned.Parent = character
        end
    end
end

local function ChangeCharacterToUserIdAvatar(userId)
    local model = players:CreateHumanoidModelFromUserId(userId)

    for _, descendant in ipairs(model:GetDescendants()) do
        if descendant:IsA("ParticleEmitter") or
        descendant:IsA("Trail") or
        descendant:IsA("Beam") or
        descendant:IsA("Fire") or
        descendant:IsA("Sparkles") or
        descendant:IsA("Smoke") or
        descendant:IsA("Highlight") then
            descendant:Destroy()
        end
    end

    local fullOutline = model:FindFirstChild("FullOutline")
    if fullOutline then
        fullOutline:Destroy()
    end

    model.Name = "TargetCharacter"
    model:WaitForChild("Humanoid")

    ChangeCharacter(model)

    model:Destroy()
end

local function SetupCharacterChangerLoop()
    localPlayer.CharacterAdded:Connect(function(character)
        wait(0)
        if Toggles.character_changer_enabled.Value then
            local userId = tonumber(Options.character_changer_id.Value)
            if userId and userId > 0 then
                pcall(function()
                    ChangeCharacterToUserIdAvatar(userId)
                end)
            end
        end
    end)
end
------------------------------------ ESP ------------------------------------
local esp = {
    playerObjects = {},
    weaponObjects = {},
    enabled = false,
    fontsize = 14,
    settings = {
        teamcheck = true,
        name = {enabled = false, outline = false, displaynames = false, color = C3(255, 255, 255)},
        box = {
            enabled = false, 
            outline = false, 
            color = C3(255, 255, 255),
            transparency = 1,
            gradient = {
                enabled = false,
                top = C3(0, 255, 0),
                bottom = C3(255, 0, 0)
            }
        },
        boxfill = {
            enabled = false, 
            color = C3(155, 155, 155), 
            transparency = 0.5,
            gradient = {
                enabled = false,
                top = C3(0, 0, 0),
                bottom = C3(255, 255, 255)
            }
        },
        healthbar = {
            enabled = false, 
            outline = false,
            gradient_enabled = false,
            gradient_top = C3(0, 255, 0),
            gradient_bottom = C3(255, 0, 0),
            thickness = 3,
            color1 = C3(0, 140, 140),
            color2 = C3(0, 0, 0)
        },
        healthtext = {enabled = false, outline = false, color = C3(255, 255, 255)},
        distance = {enabled = false, outline = false, color = C3(255, 255, 255)},
        weapon = {enabled = false, color = C3(255, 255, 255)},
        viewangle = {enabled = false, color = C3(255, 255, 255)},
        tracers = {
            enabled = false,
            position = "Top",
            fade = true,
            color = C3(255, 255, 255)
        },
        droppedweapons = {enabled = false, color = C3(255, 255, 255)},
        ammo = {enabled = false, color = C3(100, 150, 255)},
        c4timer = {
            enabled = false, 
            color = C3(255, 0, 0),
            position = "Map"
        }
    }
}

local chams = {
    enabled = false,
    teamcheck = true,
    settings = {
        fill = {enabled = true, color = C3(255, 255, 255), transparency = 0.5},
        glow = {enabled = true, color = C3(255, 255, 255), transparency = 0.3}
    }
}

esp.NewDrawing = function(type, properties)
    local newD = Drawing.new(type)
    for i,v in next, properties or {} do
        local s,e = pcall(function()
            newD[i] = v
        end)

        if not s then
            warn(e)
        end
    end
    return newD
end

esp.HasCharacter = function(v)
    local pass = false
    if v ~= localPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") then
        pass = true
    end
    return pass
end

esp.IsEnemy = function(player)
    if not esp.settings.teamcheck then
        return true
    end
    
    if player.Team == localPlayer.Team then
        return false
    else
        return true
    end
end

esp.settings.weaponicon = {
    enabled = false,
    color = C3(255, 255, 255),
    size = 15,
    y_normal = 40,
    y_withtext = 20
}

esp.NewPlayer = function(v)
    esp.playerObjects[v] = {
        name = esp.NewDrawing("Text", {Color = C3(255, 255, 255), Outline = false, Center = true, Size = 14}),
        boxOutline = esp.NewDrawing("Square", {Color = C3(0, 0, 0), Thickness = 1, ZIndex = 2}),
        box = esp.NewDrawing("Square", {Color = C3(255, 255, 255), Thickness = 1, ZIndex = 3}),
        boxfill = esp.NewDrawing("Square", {Color = C3(255, 255, 255), Thickness = 1, ZIndex = 1}),
        healthBarOutline = esp.NewDrawing("Line", {Color = C3(0, 0, 0), Thickness = 1}),
        healthBar = esp.NewDrawing("Line", {Color = C3(255, 255, 255), Thickness = 1}),
        healthBarOutline = esp.NewDrawing("Square", {Color = C3(0, 0, 0), Thickness = 1, Filled = true}),
        healthBarBackground = esp.NewDrawing("Square", {Color = C3(50, 50, 50), Thickness = 1, Filled = true}),
        healthBarFill = esp.NewDrawing("Square", {Color = C3(255, 255, 255), Thickness = 1, Filled = true}),
        healthBarGradient = nil,
        healthText = esp.NewDrawing("Text", {Color = C3(255, 255, 255), Outline = false, Center = true, Size = 14}),
        distance = esp.NewDrawing("Text", {Color = C3(255, 255, 255), Outline = false, Center = true, Size = 14}),
        weaponText = esp.NewDrawing("Text", {Color = C3(255, 255, 255), Outline = false, Center = true, Size = 14}),
        viewAngle = esp.NewDrawing("Line", {Color = C3(255, 255, 255), Thickness = 1}),
        tracer = esp.NewDrawing("Line", {Color = C3(255, 255, 255), Thickness = 1}),
        nameScreenGui = nil,
        distanceScreenGui = nil,
        healthScreenGui = nil,
        weaponScreenGui = nil,
        weaponIconGui = nil,
        boxFillGui = nil,
        boxFillGradient = nil
    }
end

for _,v in ipairs(players:GetPlayers()) do
    esp.NewPlayer(v)
end

players.PlayerAdded:Connect(function(player)
    esp.NewPlayer(player)
end)

players.PlayerRemoving:Connect(function(player)
    if esp.playerObjects[player] then
        local objects = esp.playerObjects[player]
        
        for objName, drawing in pairs(objects) do
            if typeof(drawing) == "table" and drawing.Remove then
                pcall(function()
                    drawing:Remove()
                end)
            end
        end
        
        local guisToDestroy = {
            "nameScreenGui", "distanceScreenGui", "healthScreenGui",
            "weaponScreenGui", "weaponIconGui", "boxFillGui", "healthBarGui"
        }
        
        for _, guiName in ipairs(guisToDestroy) do
            if objects[guiName] then
                pcall(function()
                    objects[guiName]:Destroy()
                end)
            end
        end
        
        esp.playerObjects[player] = nil
    end
    
    if lagVisuals[player] then
        for _, part in pairs(lagVisuals[player].parts) do
            if part and part.Parent then
                part:Destroy()
            end
        end
        lagVisuals[player] = nil
    end

    if skeletons[player] then
        removeSkeleton(skeletons[player])
        skeletons[player] = nil
    end
end)

esp.GetPlayerWeapon = function(player)
    if player and player.Character then
        local equippedTool = player.Character:FindFirstChild("EquippedTool")
        if equippedTool then
            return equippedTool.Value
        end
    end
    return "None"
end

esp.CreateWeaponESP = function(weapon)
    if not esp.weaponObjects[weapon] then
        esp.weaponObjects[weapon] = {
            weaponScreenGui = Instance.new("ScreenGui"),
            weaponText = Instance.new("TextLabel"),
            ammoText = Instance.new("TextLabel")
        }
        
        local screenGui = esp.weaponObjects[weapon].weaponScreenGui
        screenGui.Name = "WeaponESP_" .. weapon.Name
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.Parent = game:GetService("CoreGui")
        
        local textLabel = esp.weaponObjects[weapon].weaponText
        textLabel.Name = "WeaponText"
        textLabel.Size = UDim2.new(0, 100, 0, 20)
        textLabel.BackgroundTransparency = 1
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.TextStrokeTransparency = 1
        textLabel.FontFace = Silk
        textLabel.TextSize = 14
        textLabel.Parent = screenGui
        
        local ammoLabel = esp.weaponObjects[weapon].ammoText
        ammoLabel.Name = "AmmoText"
        ammoLabel.Size = UDim2.new(0, 100, 0, 20)
        ammoLabel.BackgroundTransparency = 1
        ammoLabel.TextColor3 = esp.settings.ammo.color
        ammoLabel.TextStrokeTransparency = 1
        ammoLabel.FontFace = Silk
        ammoLabel.TextSize = 14
        ammoLabel.Parent = screenGui
    end
end

if debris then
    for _, weapon in pairs(debris:GetChildren()) do
        if weapon:IsA("BasePart") then
            esp.CreateWeaponESP(weapon)
        end
    end
end

debris.ChildAdded:Connect(function(weapon)
    if weapon:IsA("BasePart") then
        esp.CreateWeaponESP(weapon)
    end
end)

debris.ChildRemoved:Connect(function(weapon)
    if esp.weaponObjects[weapon] then
        esp.weaponObjects[weapon].weaponScreenGui:Destroy()
        esp.weaponObjects[weapon] = nil
    end
end)

local c4TimerGui = Instance.new("ScreenGui")
c4TimerGui.Name = "C4TimerESP"
c4TimerGui.ResetOnSpawn = false
c4TimerGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
c4TimerGui.Parent = game:GetService("CoreGui")

local c4TimerText = Instance.new("TextLabel")
c4TimerText.Name = "C4TimerText"
c4TimerText.Size = UDim2.new(0, 100, 0, 30)
c4TimerText.BackgroundTransparency = 1
c4TimerText.TextColor3 = esp.settings.c4timer.color
c4TimerText.TextStrokeTransparency = 1
c4TimerText.FontFace = Silk
c4TimerText.TextSize = 20
c4TimerText.Text = "00.00s"
c4TimerText.Visible = false
c4TimerText.Parent = c4TimerGui

local c4Connection = nil
local c4Timer = 0

local c4BillboardGui = nil
local c4BillboardText = nil

local function updateC4Timer()
    local c4 = workspace:FindFirstChild("C4")
    
    if c4BillboardGui and c4BillboardGui.Parent then
        c4BillboardGui:Destroy()
        c4BillboardGui = nil
        c4BillboardText = nil
    end
    
    if esp.settings.c4timer.position == "Map" then
        c4TimerText.Visible = false
    end
    
    if c4 and esp.settings.c4timer.enabled then
        if not c4Connection then
            c4Timer = 40
            
            if esp.settings.c4timer.position == "Screen" then
                c4TimerText.Visible = true
                c4TimerText.Position = UDim2.new(0.5, -50, 0.1, 0)
            else
                c4BillboardGui = Instance.new("BillboardGui")
                c4BillboardText = Instance.new("TextLabel")
                
                c4BillboardGui.Name = "C4TimerBillboard"
                c4BillboardGui.AlwaysOnTop = true
                c4BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                c4BillboardGui.StudsOffset = Vector3.new(0, 0, 0)
                c4BillboardGui.Adornee = c4
                c4BillboardGui.Parent = c4
                
                c4BillboardText.Name = "C4TimerText"
                c4BillboardText.Size = UDim2.new(1, 0, 1, 0)
                c4BillboardText.BackgroundTransparency = 1
                c4BillboardText.TextColor3 = esp.settings.c4timer.color
                c4BillboardText.FontFace = Silk
                c4BillboardText.TextSize = 14
                c4BillboardText.Text = "40.00s"
                c4BillboardText.Parent = c4BillboardGui
            end
            
            c4Connection = game:GetService("RunService").RenderStepped:Connect(function()
                if c4 and c4.Parent == workspace then
                    c4Timer = c4Timer - game:GetService("RunService").RenderStepped:Wait()
                    
                    if c4Timer <= 0 then
                        if esp.settings.c4timer.position == "Screen" then
                            c4TimerText.Visible = false
                        else
                            if c4BillboardGui then
                                c4BillboardGui:Destroy()
                                c4BillboardGui = nil
                                c4BillboardText = nil
                            end
                        end
                        c4Connection:Disconnect()
                        c4Connection = nil
                    else
                        local timerText = string.format("%05.2fs", c4Timer)
                        
                        if esp.settings.c4timer.position == "Screen" then
                            c4TimerText.Text = timerText
                            c4TimerText.TextColor3 = esp.settings.c4timer.color
                        else
                            if c4BillboardText then
                                c4BillboardText.Text = timerText
                                c4BillboardText.TextColor3 = esp.settings.c4timer.color
                            end
                        end
                    end
                else
                    if esp.settings.c4timer.position == "Screen" then
                        c4TimerText.Visible = false
                    else
                        if c4BillboardGui then
                            c4BillboardGui:Destroy()
                            c4BillboardGui = nil
                            c4BillboardText = nil
                        end
                    end
                    if c4Connection then
                        c4Connection:Disconnect()
                        c4Connection = nil
                    end
                end
            end)
        end
    else
        if esp.settings.c4timer.position == "Screen" then
            c4TimerText.Visible = false
        else
            if c4BillboardGui then
                c4BillboardGui:Destroy()
                c4BillboardGui = nil
                c4BillboardText = nil
            end
        end
        if c4Connection then
            c4Connection:Disconnect()
            c4Connection = nil
        end
    end
end

workspace.ChildAdded:Connect(function(child)
    if child.Name == "C4" then
        wait(0.1)
        updateC4Timer()
    end
end)

workspace.ChildRemoved:Connect(function(child)
    if child.Name == "C4" then
        if esp.settings.c4timer.position == "Screen" then
            c4TimerText.Visible = false
        else
            if c4BillboardGui then
                c4BillboardGui:Destroy()
                c4BillboardGui = nil
                c4BillboardText = nil
            end
        end
        if c4Connection then
            c4Connection:Disconnect()
            c4Connection = nil
        end
    end
end)

------------------------------------ SILENT AIM STUFF ------------------------------------
local SilentAimSettings = {
    Enabled = false,
    
    ClassName = "Universal Silent Aim - Averiias, Stefanuk12, xaxa",
    ToggleKey = "RightAlt",
    
    TeamCheck = false,
    VisibleCheck = false, 
    TargetPart = "HumanoidRootPart",
    SilentAimMethod = "FindPartOnRayWithIgnoreList",
    
    FOVRadius = 130,
    FOVVisible = false,
    ShowSilentAimTarget = false, 
    
    MouseHitPrediction = false,
    MouseHitPredictionAmount = 0.165,
    HitChance = 100
}

getgenv().SilentAimSettings = Settings

local ValidTargetParts = {"Head", "HumanoidRootPart"}
local PredictionAmount = 0.165

local as_fov_circleout1 = Drawing.new("Circle")
as_fov_circleout1.Thickness = 1
as_fov_circleout1.NumSides = 100
as_fov_circleout1.Radius = 130
as_fov_circleout1.Filled = false
as_fov_circleout1.Visible = false
as_fov_circleout1.ZIndex = 9
as_fov_circleout1.Transparency = 1
as_fov_circleout1.Color = C3(0, 0, 0)
local as_fov_circle = Drawing.new("Circle")
as_fov_circle.Thickness = 1
as_fov_circle.NumSides = 100
as_fov_circle.Radius = 130
as_fov_circle.Filled = false
as_fov_circle.Visible = false
as_fov_circle.ZIndex = 10
as_fov_circle.Transparency = 1
as_fov_circle.Color = C3(54, 57, 241)
local as_fov_circleout2 = Drawing.new("Circle")
as_fov_circleout2.Thickness = 1
as_fov_circleout2.NumSides = 100
as_fov_circleout2.Radius = 130
as_fov_circleout2.Filled = false
as_fov_circleout2.Visible = false
as_fov_circleout2.ZIndex = 9
as_fov_circleout2.Transparency = 1
as_fov_circleout2.Color = C3(0, 0, 0)
--// Silent Aim FOV Circles
local br_fov_circleout1 = Drawing.new("Circle")
br_fov_circleout1.Thickness = 1
br_fov_circleout1.NumSides = 100
br_fov_circleout1.Radius = 130
br_fov_circleout1.Filled = false
br_fov_circleout1.Visible = false
br_fov_circleout1.ZIndex = 9
br_fov_circleout1.Transparency = 1
br_fov_circleout1.Color = C3(0, 0, 0)
local br_fov_circle = Drawing.new("Circle")
br_fov_circle.Thickness = 1
br_fov_circle.NumSides = 100
br_fov_circle.Radius = 130
br_fov_circle.Filled = false
br_fov_circle.Visible = false
br_fov_circle.ZIndex = 10
br_fov_circle.Transparency = 1
br_fov_circle.Color = C3(54, 57, 241)
local br_fov_circleout2 = Drawing.new("Circle")
br_fov_circleout2.Thickness = 1
br_fov_circleout2.NumSides = 100
br_fov_circleout2.Radius = 130
br_fov_circleout2.Filled = false
br_fov_circleout2.Visible = false
br_fov_circleout2.ZIndex = 9
br_fov_circleout2.Transparency = 1
br_fov_circleout2.Color = C3(0, 0, 0)

local ExpectedArguments = {
    FindPartOnRayWithIgnoreList = {
        ArgCountRequired = 3,
        Args = {
            "Instance", "Ray", "table", "boolean", "boolean"
        }
    }
}

function CalculateChance(Percentage)

    Percentage = math.floor(Percentage)

    local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100

    return chance <= Percentage / 100
end

local function getPositionOnScreen(Vector)
    local Vec3, OnScreen = currentCamera.WorldToScreenPoint(currentCamera, Vector)
    return Vec2(Vec3.X, Vec3.Y), OnScreen
end

local function ValidateArguments(Args, RayMethod)
    local Matches = 0
    if #Args < RayMethod.ArgCountRequired then
        return false
    end
    for Pos, Argument in next, Args do
        if typeof(Argument) == RayMethod.Args[Pos] then
            Matches = Matches + 1
        end
    end
    return Matches >= RayMethod.ArgCountRequired
end

local function getDirection(Origin, Position)
    return (Position - Origin).Unit * 1000
end

local function getMousePosition()
    return userInput.GetMouseLocation(userInput)
end

local function IsPlayerVisible(Player)
    local PlayerCharacter = Player.Character
    local LocalPlayerCharacter = localPlayer.Character
    
    if not (PlayerCharacter or LocalPlayerCharacter) then return end 
    
    local PlayerRoot = game.FindFirstChild(PlayerCharacter, Options.TargetPart.Value) or game.FindFirstChild(PlayerCharacter, "HumanoidRootPart")
    
    if not PlayerRoot then return end 
    
    local CastPoints, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
    local ObscuringObjects = #currentCamera.GetPartsObscuringTarget(currentCamera, CastPoints, IgnoreList)
    
    return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
end

local function getClosestPlayer()
    if not Options.TargetPart.Value then return end
    
    local Closest
    local DistanceToMouse
    local MousePos = getMousePosition()
    
    for _, Player in next, players.GetPlayers(players) do
        if Player ~= localPlayer and not (Toggles.TeamCheck.Value and Player.Team == localPlayer.Team) then
            local Character = Player.Character
            if Character then
                if not (Toggles.VisibleCheck.Value and not IsPlayerVisible(Player)) then
                    local HumanoidRootPart = game.FindFirstChild(Character, "HumanoidRootPart")
                    local Humanoid = game.FindFirstChild(Character, "Humanoid")
                    
                    if HumanoidRootPart and Humanoid and Humanoid.Health > 0 then
                        local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
                        
                        local targetPos = HumanoidRootPart.Position
                        if Toggles.aim_shoot_lagvis.Value and lagVisuals[Player] and #lagVisuals[Player].parts > 0 then
                            local lagPart = lagVisuals[Player].parts[1]
                            if lagPart and lagPart.Parent then
                                targetPos = lagPart.Position
                                ScreenPosition, OnScreen = getPositionOnScreen(targetPos)
                            end
                        end
                        
                        local Distance = (MousePos - ScreenPosition).Magnitude
                        if not Toggles.aim_use_fov.Value or (OnScreen and Distance <= (DistanceToMouse or Options.Radius.Value or 2000)) then
                            Closest = ((Options.TargetPart.Value == "Random" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[Options.TargetPart.Value])
                            DistanceToMouse = Distance
                        end
                    end
                end
            end
        end
    end
    return Closest
end
------------------------------------ AIM ASSIST CODE ------------------------------------
local AimSettings = {
    Enabled = false,
    TeamCheck = false,
    Smoothness = 1,
    Radius = 50,
    Hitbox = 'Head'
}

local function getClosest(cframe)
   local ray = Ray.new(cframe.Position, cframe.LookVector).Unit
   
   local target = nil
   local mag = math.huge
   
    for i,v in pairs(players:GetPlayers()) do
        if v ~= localPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and (v.Team ~= localPlayer.Team or (not AimSettings.TeamCheck)) then

            local magBuf = (v.Character[AimSettings.Hitbox].Position - ray:ClosestPoint(v.Character[AimSettings.Hitbox].Position)).Magnitude
            
            if magBuf < mag then
                mag = magBuf
                target = v
            end
        end
    end
   
   return target
end
------------------------------------ NADO ---------------------------------------

local function changeMapMaterials()
    if not materialColor.enabled then return end
    
    local currentMap = workspace:FindFirstChild("Map")
    if not currentMap or materialColor.appliedMaps[currentMap] then return end
    
    if materialColor.appliedMaps[currentMap] then return 0 end
    materialColor.appliedMaps[currentMap] = true
    
    local changedCount = 0
    local maxAttempts = 3
    local attempt = 0
    
    local function applyMaterialsWithRetry()
        attempt = attempt + 1
        
        local function processDescendants(parent)
            for _, child in ipairs(parent:GetDescendants()) do
                if child:GetAttribute("ProtectedPart") or child:GetAttribute("NoMaterialChange") or child.Name == "HEVisualizer" then
                    continue
                end
                
                if child:IsA("BasePart") then
                    local isMollyFire = false
                    
                    local parentObj = child.Parent
                    while parentObj do
                        if parentObj.Name == "Fires" or string.lower(tostring(parentObj)):find("fire") or string.lower(tostring(parentObj)):find("molly") then
                            isMollyFire = true
                            break
                        end
                        parentObj = parentObj.Parent
                    end
                    
                    if child.Name == "Effect" or child.Name == "Fire" or string.lower(child.Name):find("fire") or string.lower(child.Name):find("flame") then
                        isMollyFire = true
                    end
                    
                    if isMollyFire then
                        continue
                    end
                    
                    if not (child:IsA("Model") and game.Players:GetPlayerFromCharacter(child)) then
                        if not (child:IsA("Tool") or child:IsA("Accessory") or child:IsA("Humanoid")) then
                            if not child:GetAttribute("OriginalColor") then
                                child:SetAttribute("OriginalColor", child.Color)
                            end
                            if not child:GetAttribute("OriginalMaterial") then
                                child:SetAttribute("OriginalMaterial", child.Material)
                            end
                            
                            child.Color = materialColor.color
                            child.Material = materialColor.material
                            changedCount = changedCount + 1
                            
                        elseif child:IsA("Decal") or child:IsA("Texture") then
                            if string.lower(child.Name):find("fire") or string.lower(child.Name):find("flame") then
                                continue
                            end
                            
                            if not child:GetAttribute("OriginalColor") then
                                child:SetAttribute("OriginalColor", child.Color3)
                            end
                            
                            child.Color3 = materialColor.color
                            changedCount = changedCount + 1
                        end
                    end
                end
            end
        end
        
        if currentMap then
            processDescendants(currentMap)
        end
        
        for _, child in ipairs(workspace:GetChildren()) do
            if child.Name ~= "Ray_Ignore" then
                processDescendants(child)
            end
        end
    end
    
    while attempt < maxAttempts and changedCount == 0 do
        applyMaterialsWithRetry()
        if changedCount == 0 then
            wait(1)
        end
    end
    
    return changedCount
end

local function restoreMapMaterials()
    local restoredCount = 0
    
    local function restoreDescendants(parent)
        for _, child in ipairs(parent:GetDescendants()) do
            local isMollyFire = false
            local parentObj = child.Parent
            while parentObj do
                if parentObj.Name == "Fires" or string.lower(tostring(parentObj)):find("fire") or string.lower(tostring(parentObj)):find("molly") then
                    isMollyFire = true
                    break
                end
                parentObj = parentObj.Parent
            end
            
            if child.Name == "Effect" or child.Name == "Fire" or string.lower(child.Name):find("fire") or string.lower(child.Name):find("flame") then
                isMollyFire = true
            end
            
            if isMollyFire then
                continue
            end
            
            if child:IsA("BasePart") then
                local originalColor = child:GetAttribute("OriginalColor")
                local originalMaterial = child:GetAttribute("OriginalMaterial")
                
                if originalColor then
                    child.Color = originalColor
                    restoredCount = restoredCount + 1
                end
                if originalMaterial then
                    child.Material = originalMaterial
                    restoredCount = restoredCount + 1
                end
                
            elseif child:IsA("Decal") or child:IsA("Texture") then
                local originalColor = child:GetAttribute("OriginalColor")
                if originalColor then
                    child.Color3 = originalColor
                    restoredCount = restoredCount + 1
                end
            end
        end
    end

    materialColor.appliedMaps = {}
    
    for _, child in ipairs(workspace:GetChildren()) do
        if child.Name ~= "Ray_Ignore" then
            restoreDescendants(child)
        end
    end
    
    return restoredCount
end

local function setupMapTracking()
    workspace.ChildAdded:Connect(function(child)
        if child.Name == "Map" and materialColor.enabled then
            wait(3)
            changeMapMaterials()
        end
    end)
    
    workspace.DescendantAdded:Connect(function(descendant)
        if materialColor.enabled then
            wait(0.5)
            
            local isMollyFire = false
            local parentObj = descendant.Parent
            while parentObj do
                if parentObj.Name == "Fires" or string.lower(tostring(parentObj)):find("fire") or string.lower(tostring(parentObj)):find("molly") then
                    isMollyFire = true
                    break
                end
                parentObj = parentObj.Parent
            end
            
            if descendant.Name == "Effect" or descendant.Name == "Fire" or string.lower(descendant.Name):find("fire") or string.lower(descendant.Name):find("flame") then
                isMollyFire = true
            end
            
            if isMollyFire then
                return
            end
            
            if descendant:IsA("BasePart") or descendant:IsA("Decal") or descendant:IsA("Texture") then
                local isPlayerRelated = false
                local parent = descendant.Parent
                
                while parent do
                    if parent:IsA("Model") and game.Players:GetPlayerFromCharacter(parent) then
                        isPlayerRelated = true
                        break
                    end
                    if parent:IsA("Tool") or parent:IsA("Accessory") then
                        isPlayerRelated = true
                        break
                    end
                    parent = parent.Parent
                end
                
                if not isPlayerRelated then
                    if descendant:IsA("BasePart") then
                        if not descendant:GetAttribute("OriginalColor") then
                            descendant:SetAttribute("OriginalColor", descendant.Color)
                        end
                        descendant.Color = materialColor.color
                        descendant.Material = materialColor.material
                    elseif descendant:IsA("Decal") or descendant:IsA("Texture") then
                        if not descendant:GetAttribute("OriginalColor") then
                            descendant:SetAttribute("OriginalColor", descendant.Color3)
                        end
                        descendant.Color3 = materialColor.color
                    end
                end
            end
        end
    end)
end

setupMapTracking()

------------------------------------ CONTENT ------------------------------------
AimbotSec1:AddToggle("aim_Enabled", {Text = "Enabled"}):AddKeyPicker("aim_Enabled_KeyPicker", {Default = "RightAlt", SyncToggleState = true, Mode = "Toggle", Text = "Silent Aim", NoUI = false});
Options.aim_Enabled_KeyPicker:OnClick(function()
    SilentAimSettings.Enabled = not SilentAimSettings.Enabled
    
    Toggles.aim_Enabled.Value = SilentAimSettings.Enabled
    Toggles.aim_Enabled:SetValue(SilentAimSettings.Enabled)
end)
    
AimbotSec1:AddToggle("TeamCheck", {Text = "Team Check", Default = SilentAimSettings.TeamCheck}):OnChanged(function()
    SilentAimSettings.TeamCheck = Toggles.TeamCheck.Value
end)
AimbotSec1:AddToggle("VisibleCheck", {Text = "Visible Check", Default = SilentAimSettings.VisibleCheck}):OnChanged(function()
    SilentAimSettings.VisibleCheck = Toggles.VisibleCheck.Value
end)
AimbotSec1:AddDropdown("TargetPart", {Text = "Target Part", Default = SilentAimSettings.TargetPart, Values = {"Head", "HumanoidRootPart", "Random"}}):OnChanged(function()
    SilentAimSettings.TargetPart = Options.TargetPart.Value
end)

AimbotSec1:AddSlider('HitChance', {Text = 'Hit chance', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false,})
Options.HitChance:OnChanged(function()
    SilentAimSettings.HitChance = Options.HitChance.Value
end)
AimbotSec1:AddToggle('aim_autoshot', {Text = 'Auto Shot', Default = false})

AimbotSec1:AddToggle('aim_shoot_lagvis', {Text = 'Shoot at Lag Visual', Default = false})

AimbotSec1:AddToggle('aim_use_fov', {Text = 'Use FOV', Default = true})

AimbotSec1:AddSlider("Radius", {Text = "FOV Circle Radius", Min = 0, Max = 1000, Default = 130, Rounding = 0}):OnChanged(function()
    br_fov_circleout1.Radius = Options.Radius.Value + 1
    br_fov_circle.Radius = Options.Radius.Value
    br_fov_circleout2.Radius = Options.Radius.Value - 1
    
    SilentAimSettings.FOVRadius = Options.Radius.Value
end)

AimbotSec1:AddToggle('br_fov', {Text = 'Show FOV Circle', Default = false})
Toggles.br_fov:OnChanged(function()
end)
Toggles.br_fov:AddColorPicker('br_fovcolor', {Default = C3(255,255,255), Title = 'FOV Circle Color'})
Options.br_fovcolor:OnChanged(function()
    br_fov_circle.Color = Options.br_fovcolor.Value
end)
AimbotSec1:AddToggle('br_fovout', {Text = 'Circle Outline', Default = false})

AimbotSec2:AddToggle('as_enabled', {Text = 'Enabled', Default = false})
Toggles.as_enabled:OnChanged(function()
   AimSettings.Enabled = Toggles.as_enabled.Value
end)
    
AimbotSec2:AddToggle('as_tc', {Text = 'Team Check', Default = false})
Toggles.as_tc:OnChanged(function()
   AimSettings.TeamCheck = Toggles.as_tc.Value
end)

--AimbotSec2:AddToggle('as_vis', {Text = 'Visible Check', Default = false})
--Toggles.as_vis:OnChanged(function()
--   AimSettings.VisibleCheck = Toggles.as_vis.Value
--end)

AimbotSec2:AddDropdown("as_hb", {Text = "Target Part", Default = AimSettings.Hitbox, Values = {"Head", "HumanoidRootPart"}}):OnChanged(function()
    AimSettings.Hitbox = Options.as_hb.Value
end)

AimbotSec2:AddSlider('as_smoothness', {Text = 'Smoothness', Default = 1, Min = 1, Max = 10, Rounding = 0, Compact = false})
Options.as_smoothness:OnChanged(function()
    AimSettings.Smoothness = Options.as_smoothness.Value/10
end)

AimbotSec2:AddSlider('as_radius', {Text = 'FOV', Default = 50, Min = 1, Max = 420, Rounding = 0, Compact = false})
Options.as_radius:OnChanged(function()
    AimSettings.Radius = Options.as_radius.Value
    
    as_fov_circleout1.Radius = Options.as_radius.Value - 1
    as_fov_circle.Radius = Options.as_radius.Value
    as_fov_circleout2.Radius = Options.as_radius.Value + 1
end)

AimbotSec2:AddToggle('as_fov', {Text = 'Show FOV Circle', Default = false})
Toggles.as_fov:AddColorPicker('as_fovcolor', {Default = C3(255,255,255), Title = 'FOV Circle Color'})
Options.as_fovcolor:OnChanged(function()
    as_fov_circle.Color = Options.as_fovcolor.Value
end)
AimbotSec2:AddToggle('as_fovout', {Text = 'Circle Outline', Default = false})
--------------------------------------------------------------------------------------
RageSec1:AddToggle('antiaim_enabled', {Text = 'Enabled', Default = false})

RageSec1:AddDropdown('antiaim_type', {
    Text = 'Type',
    Default = 'Spin',
    Values = {'Spin', 'Pitch'}
})

RageSec1:AddDropdown('antiaim_direction', {
    Text = 'Look Direction', 
    Default = 'Forward',
    Values = {'Random', 'Backward'}
})

RageSec1:AddDropdown('antiaim_yaw_base', {
    Text = 'Yaw Base',
    Default = 'Spin',
    Values = {'Spin', 'Random', 'Targets', 'Backward'}
})

RageSec1:AddSlider('antiaim_yaw_offset', {
    Text = 'Yaw Offset',
    Default = 0,
    Min = -180,
    Max = 180,
    Rounding = 0
})

RageSec1:AddToggle('antiaim_jitter', {Text = 'Jitter', Default = false})
RageSec1:AddSlider('antiaim_jitter_offset', {
    Text = 'Jitter Offset',
    Default = 30,
    Min = 0,
    Max = 180,
    Rounding = 0
})

RageSec1:AddSlider('antiaim_jitter_speed', {
    Text = 'Jitter Speed',
    Default = 10,
    Min = 1,
    Max = 500,
    Rounding = 0,
    Suffix = 'ms'
})

RageSec1:AddDropdown('antiaim_pitch', {
    Text = 'Pitch',
    Default = 'None',
    Values = {'None', 'Up', 'Down', 'Zero', 'Random'}
})

RageSec1:AddToggle('antiaim_extend_pitch', {Text = 'Extend Pitch', Default = false})

RageSec1:AddDropdown('antiaim_body_roll', {
    Text = 'Body Roll', 
    Default = 'None',
    Values = {'None', '180'}
})

RageSec1:AddSlider('antiaim_spin_speed', {
    Text = 'Spin Speed',
    Default = 50,
    Min = 1,
    Max = 150,
    Rounding = 0
})

Toggles.antiaim_enabled:OnChanged(function()
    antiaim.enabled = Toggles.antiaim_enabled.Value
    if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
        localPlayer.Character.Humanoid.AutoRotate = not Toggles.antiaim_enabled.Value
    end
end)

Options.antiaim_type:OnChanged(function()
    antiaim.type = Options.antiaim_type.Value
end)

Options.antiaim_direction:OnChanged(function()
    antiaim.direction = Options.antiaim_direction.Value
end)

Options.antiaim_spin_speed:OnChanged(function()
    antiaim.speed = Options.antiaim_spin_speed.Value
end)

Toggles.antiaim_jitter:OnChanged(function()
    antiaim.jitter = Toggles.antiaim_jitter.Value
end)

RageSec2:AddToggle('fakelag_enabled', {Text = 'Enabled', Default = false}):AddKeyPicker('fakelag_enabled_keybind', {
    Default = 'None',
    Mode = 'Toggle', 
    Text = 'Fake Lag',
    NoUI = false
})

RageSec2:AddDropdown('fakelag_mode', {
    Text = 'Mode',
    Default = 'Dynamic',
    Values = {'Static', 'Dynamic'}
})

RageSec2:AddSlider('fakelag_limit', {
    Text = 'Limit',
    Default = 12,
    Min = 1,
    Max = 16,
    Rounding = 0
})

RageSec2:AddToggle('fakelag_pingspike', {Text = 'Ping Spike', Default = false}):AddKeyPicker('fakelag_pingspike_keybind', {
    Default = 'None',
    Mode = 'Toggle',
    Text = 'Ping Spike',
    NoUI = false
})

RageSec2:AddToggle('lagvis_enabled', {Text = 'Visualize Lag', Default = false})

local lagvis_me_toggle = RageSec2:AddToggle('lagvis_me', {Text = 'Me', Default = false})
lagvis_me_toggle:AddColorPicker('lagvis_me_color', {Default = C3(0, 255, 0), Title = 'My Color'})

local lagvis_team_toggle = RageSec2:AddToggle('lagvis_team', {Text = 'Team', Default = false})
lagvis_team_toggle:AddColorPicker('lagvis_team_color', {Default = C3(0, 100, 255), Title = 'Team Color'})

local lagvis_enemy_toggle = RageSec2:AddToggle('lagvis_enemy', {Text = 'Enemy', Default = true})
lagvis_enemy_toggle:AddColorPicker('lagvis_enemy_color', {Default = C3(255, 0, 0), Title = 'Enemy Color'})

Toggles.fakelag_enabled:OnChanged(function()
    fakelagEnabled = Toggles.fakelag_enabled.Value
end)

Options.fakelag_enabled_keybind:OnClick(function()
    fakelagEnabled = not fakelagEnabled
    Toggles.fakelag_enabled:SetValue(fakelagEnabled)
end)

Toggles.fakelag_pingspike:OnChanged(function()
    pingSpikeActive = Toggles.fakelag_pingspike.Value
end)

Options.fakelag_pingspike_keybind:OnClick(function()
    pingSpikeActive = not pingSpikeActive
    Toggles.fakelag_pingspike:SetValue(pingSpikeActive)
end)

players.PlayerRemoving:Connect(function(player)
    if lagVisuals[player] then
        for _, part in pairs(lagVisuals[player].parts) do
            if part and part.Parent then
                part:Destroy()
            end
        end
        lagVisuals[player] = nil
    end
end)

workspace.ChildAdded:Connect(function(child)
    if child.Name == "Map" then
        wait(3)
        for playerName, visual in pairs(lagVisuals) do
            for _, part in pairs(visual.parts) do
                if part and part.Parent then
                    part:Destroy()
                end
            end
        end
        lagVisuals = {}
    end
end)

game:GetService("CoreGui").DescendantRemoving:Connect(function(descendant)
    if descendant == Library then
        for playerName, visual in pairs(lagVisuals) do
            for _, part in pairs(visual.parts) do
                if part and part.Parent then
                    part:Destroy()
                end
            end
        end
        lagVisuals = {}
    end
end)
--------------------------------------------------------------------------------------
ESPTab:AddToggle('espenabled', {Text = 'Enabled', Default = false})
Toggles.espenabled:OnChanged(function()
   esp.enabled = Toggles.espenabled.Value
end)

ESPTab:AddToggle('espbox', {Text = 'Box', Default = false})
Toggles.espbox:OnChanged(function()
   esp.settings.box.enabled = Toggles.espbox.Value
end)

ESPTab:AddLabel('Box Color'):AddColorPicker('espbox_defaultcolor', {Default = C3(255,255,255), Title = 'Box Color'})
Options.espbox_defaultcolor:OnChanged(function()
    esp.settings.box.color = Options.espbox_defaultcolor.Value
end)

ESPTab:AddSlider('espbox_transparency', {
    Text = 'Box Transparency', 
    Default = 100,
    Min = 0, 
    Max = 100, 
    Rounding = 0,
    Suffix = '%',
    Compact = false
}):OnChanged(function(val)
    esp.settings.box.transparency = val / 100
end)

ESPTab:AddToggle('espnames', {Text = 'Names', Default = false})
Toggles.espnames:OnChanged(function()
   esp.settings.name.enabled = Toggles.espnames.Value
end)
Toggles.espnames:AddColorPicker('espnamescolor', {Default = C3(255,255,255), Title = 'Names Color'})
Options.espnamescolor:OnChanged(function()
    esp.settings.name.color = Options.espnamescolor.Value
end)

ESPTab:AddToggle('espboxfill', {Text = 'Box Fill', Default = false})
Toggles.espboxfill:OnChanged(function()
   esp.settings.boxfill.enabled = Toggles.espboxfill.Value
end)

ESPTab:AddToggle('espboxfill_gradient', {Text = 'Box Fill Gradient', Default = false})
Toggles.espboxfill_gradient:OnChanged(function()
   esp.settings.boxfill.gradient.enabled = Toggles.espboxfill_gradient.Value
end)

ESPTab:AddLabel('Default Box Fill Color'):AddColorPicker('espboxfill_defaultcolor', {Default = C3(150,150,150), Title = 'Default Box Fill Color'})
Options.espboxfill_defaultcolor:OnChanged(function()
    esp.settings.boxfill.color = Options.espboxfill_defaultcolor.Value
end)

ESPTab:AddLabel('Box Fill Gradient Top'):AddColorPicker('espboxfill_gradient_left', {Default = C3(0, 200, 255), Title = 'Box Fill Gradient Top'})
Options.espboxfill_gradient_left:OnChanged(function()
    esp.settings.boxfill.gradient.left = Options.espboxfill_gradient_left.Value
end)

ESPTab:AddLabel('Box Fill Gradient Bottom'):AddColorPicker('espboxfill_gradient_right', {Default = C3(255, 100, 0), Title = 'Box Fill Gradient Bottom'})
Options.espboxfill_gradient_right:OnChanged(function()
    esp.settings.boxfill.gradient.right = Options.espboxfill_gradient_right.Value
end)

ESPTab:AddSlider('espboxfill_transparency', {
    Text = 'Box Fill Transparency', 
    Default = 50, 
    Min = 0, 
    Max = 100, 
    Rounding = 0,
    Suffix = '%',
    Compact = false
}):OnChanged(function(val)
    esp.settings.boxfill.transparency = val / 100
end)

ESPTab:AddToggle('esphb', {Text = 'Health bar', Default = false})
Toggles.esphb:OnChanged(function()
   esp.settings.healthbar.enabled = Toggles.esphb.Value
end)

ESPTab:AddToggle('esphealthbar_outline', {Text = 'Healthbar Outline', Default = false})
Toggles.esphealthbar_outline:OnChanged(function()
   esp.settings.healthbar.outline = Toggles.esphealthbar_outline.Value
end)

ESPTab:AddLabel('Gradient Bottom Color'):AddColorPicker('esphealthbar_gradient_top', {Default = C3(0, 255, 0), Title = 'Bottom Color'})
Options.esphealthbar_gradient_top:OnChanged(function()
    esp.settings.healthbar.gradient_top = Options.esphealthbar_gradient_top.Value
end)

ESPTab:AddLabel('Gradient Top Color'):AddColorPicker('esphealthbar_gradient_bottom', {Default = C3(255, 0, 0), Title = 'Top Color'})
Options.esphealthbar_gradient_bottom:OnChanged(function()
    esp.settings.healthbar.gradient_bottom = Options.esphealthbar_gradient_bottom.Value
end)
ESPTab:AddSlider('esphealthbar_thickness', {
    Text = 'Healthbar Thickness', 
    Default = 2, 
    Min = 1, 
    Max = 10, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    esp.settings.healthbar.thickness = val
end)

ESPTab:AddToggle('espdistance', {Text = 'Distance', Default = false})
Toggles.espdistance:OnChanged(function()
   esp.settings.distance.enabled = Toggles.espdistance.Value
end)
Toggles.espdistance:AddColorPicker('espdistancecolor', {Default = C3(255,255,255), Title = 'Distance Color'})
Options.espdistancecolor:OnChanged(function()
    esp.settings.distance.color = Options.espdistancecolor.Value
end)

ESPTab:AddToggle('espweapon', {Text = 'Weapon', Default = false})
Toggles.espweapon:OnChanged(function()
   esp.settings.weapon.enabled = Toggles.espweapon.Value
end)
Toggles.espweapon:AddColorPicker('espweaponcolor', {Default = C3(255,255,255), Title = 'Weapon Color'})
Options.espweaponcolor:OnChanged(function()
    esp.settings.weapon.color = Options.espweaponcolor.Value
end)

ESPTab:AddToggle('espweaponicon', {Text = 'Weapon Icon', Default = false})
Toggles.espweaponicon:OnChanged(function()
   esp.settings.weaponicon.enabled = Toggles.espweaponicon.Value
end)
Toggles.espweaponicon:AddColorPicker('espweaponiconcolor', {Default = C3(255,255,255), Title = 'Weapon Icon Color'})
Options.espweaponiconcolor:OnChanged(function()
    esp.settings.weaponicon.color = Options.espweaponiconcolor.Value
end)

ESPTab:AddSlider('espweaponiconsize', {
    Text = 'Icon Size', 
    Default = 15, 
    Min = 10, 
    Max = 60, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    esp.settings.weaponicon.size = val
end)

ESPTab:AddSlider('espweaponicon_y_normal', {
    Text = 'Y Position Normal', 
    Default = 75, 
    Min = 00, 
    Max = 120, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    esp.settings.weaponicon.y_normal = val
end)

ESPTab:AddSlider('espweaponicon_y_withtext', {
    Text = 'Y Position With Text', 
    Default = 52, 
    Min = 0, 
    Max = 120, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    esp.settings.weaponicon.y_withtext = val
end)

ESPTab:AddToggle('espammo', {Text = 'Ammo', Default = false})
Toggles.espammo:OnChanged(function()
   esp.settings.ammo.enabled = Toggles.espammo.Value
end)
Toggles.espammo:AddColorPicker('espammocolor', {Default = C3(100,150,255), Title = 'Ammo Color'})
Options.espammocolor:OnChanged(function()
    esp.settings.ammo.color = Options.espammocolor.Value
end)

ESPTab:AddToggle('esptracers', {Text = 'Tracers', Default = false})
Toggles.esptracers:OnChanged(function()
   esp.settings.tracers.enabled = Toggles.esptracers.Value
end)

Toggles.esptracers:AddColorPicker('esptracerscolor', {Default = C3(255,255,255), Title = 'Tracers Color'})
Options.esptracerscolor:OnChanged(function()
    esp.settings.tracers.color = Options.esptracerscolor.Value
end)

ESPTab:AddDropdown('esptracersposition', {
    Values = {'Bottom', 'Top'},
    Default = 1,
    Multi = false,
    Text = 'Tracers Position'
})
Options.esptracersposition:OnChanged(function()
    esp.settings.tracers.position = Options.esptracersposition.Value
end)

ESPTab:AddToggle('skeleton_enabled', {Text = 'Skeleton ESP', Default = false})
Toggles.skeleton_enabled:OnChanged(function()
    skeletonESP.enabled = Toggles.skeleton_enabled.Value
    if not skeletonESP.enabled then
        for plr, skeleton in pairs(skeletons) do
            removeSkeleton(skeleton)
            skeletons[plr] = nil
        end
    end
end)

ESPTab:AddLabel('Skeleton Color'):AddColorPicker('skeleton_color', {
    Default = C3(255, 255, 255),
    Title = 'Skeleton Color'
})
Options.skeleton_color:OnChanged(function()
    skeletonESP.color = Options.skeleton_color.Value
end)

ESPTab:AddSlider('skeleton_thickness', {
    Text = 'Skeleton Thickness',
    Default = 1,
    Min = 1,
    Max = 3,
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    skeletonESP.thickness = val
end)

ESPTab:AddSlider('skeleton_transparency', {
    Text = 'Skeleton Transparency',
    Default = 0,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Suffix = '%',
    Compact = false
}):OnChanged(function(val)
    skeletonESP.transparency = val / 100
end)

ESPTab:AddToggle('espdroppedweapons', {Text = 'Dropped Weapons', Default = false})
Toggles.espdroppedweapons:OnChanged(function()
   esp.settings.droppedweapons.enabled = Toggles.espdroppedweapons.Value
end)
Toggles.espdroppedweapons:AddColorPicker('espdroppedweaponscolor', {Default = C3(255,255,255), Title = 'Dropped Weapons Color'})
Options.espdroppedweaponscolor:OnChanged(function()
    esp.settings.droppedweapons.color = Options.espdroppedweaponscolor.Value
end)

ESPTab:AddToggle('espC4Timer', {Text = 'C4 Timer', Default = false})
Toggles.espC4Timer:OnChanged(function()
   esp.settings.c4timer.enabled = Toggles.espC4Timer.Value
   updateC4Timer()
end)
Toggles.espC4Timer:AddColorPicker('espC4Timercolor', {Default = C3(255,0,0), Title = 'C4 Timer Color'})
Options.espC4Timercolor:OnChanged(function()
    esp.settings.c4timer.color = Options.espC4Timercolor.Value
end)

ESPTab:AddDropdown('espC4TimerPosition', {
    Values = {'Screen', 'Map'},
    Default = 1,
    Multi = false,
    Text = 'Timer Position'
})
Options.espC4TimerPosition:OnChanged(function()
    esp.settings.c4timer.position = Options.espC4TimerPosition.Value
    
    if c4Connection then
        c4Connection:Disconnect()
        c4Connection = nil
    end
    
    updateC4Timer()
end)

ESPTab:AddToggle('grenade_esp_enabled', {Text = 'Grenade ESP', Default = false})
Toggles.grenade_esp_enabled:OnChanged(function()
   grenadeESP.enabled = Toggles.grenade_esp_enabled.Value
end)

ESPTab:AddLabel('Background Color'):AddColorPicker('grenade_bg_color', {Default = C3(0.1, 0.1, 0.1), Title = 'Background Color'})
Options.grenade_bg_color:OnChanged(function()
    grenadeESP.settings.background.color = Options.grenade_bg_color.Value
end)

ESPTab:AddToggle('grenade_outline_enabled', {Text = 'Outline', Default = true})
Toggles.grenade_outline_enabled:OnChanged(function()
   grenadeESP.settings.outline.enabled = Toggles.grenade_outline_enabled.Value
end)

ESPTab:AddLabel('Outline Color'):AddColorPicker('grenade_outline_color', {Default = C3(0, 0, 0), Title = 'Outline Color'})
Options.grenade_outline_color:OnChanged(function()
    grenadeESP.settings.outline.color = Options.grenade_outline_color.Value
end)

ESPTab:AddSlider('grenade_outline_thickness', {
    Text = 'Outline Thickness', 
    Default = 2, 
    Min = 1, 
    Max = 10, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.outline.thickness = val
end)

ESPTab:AddToggle('grenade_icon_enabled', {Text = 'Icon', Default = true})
Toggles.grenade_icon_enabled:OnChanged(function()
   grenadeESP.settings.icon.enabled = Toggles.grenade_icon_enabled.Value
end)

ESPTab:AddLabel('Icon Color'):AddColorPicker('grenade_icon_color', {Default = C3(0, 0, 0), Title = 'Icon Color'})
Options.grenade_icon_color:OnChanged(function()
    grenadeESP.settings.icon.color = Options.grenade_icon_color.Value
end)

ESPTab:AddSlider('grenade_icon_size', {
    Text = 'Icon Size', 
    Default = 100, 
    Min = 50, 
    Max = 200, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.icon.size = val / 100
end)

ESPTab:AddToggle('grenade_text_enabled', {Text = 'Grenade Name', Default = true})
Toggles.grenade_text_enabled:OnChanged(function()
   grenadeESP.settings.text.enabled = Toggles.grenade_text_enabled.Value
end)

ESPTab:AddLabel('Text Color'):AddColorPicker('grenade_text_color', {Default = C3(0, 0, 0), Title = 'Text Color'})
Options.grenade_text_color:OnChanged(function()
    grenadeESP.settings.text.color = Options.grenade_text_color.Value
end)

ESPTab:AddSlider('grenade_text_size', {
    Text = 'Text Size', 
    Default = 14, 
    Min = 8, 
    Max = 20, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.text.size = val
end)

ESPTab:AddSlider('grenade_circle_size', {
    Text = 'Circle Size', 
    Default = 12, 
    Min = 8, 
    Max = 30, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.circle.size = val
end)

ESPTab:AddSlider('grenade_scale_min', {
    Text = 'Min Scale', 
    Default = 40, 
    Min = 20, 
    Max = 100, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.circle.scale_min = val
end)

ESPTab:AddSlider('grenade_scale_max', {
    Text = 'Max Scale', 
    Default = 80, 
    Min = 30, 
    Max = 150, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    grenadeESP.settings.circle.scale_max = val
end)

ESPSTab:AddToggle('espdisplay', {Text = 'Use Display Names', Default = false})
Toggles.espdisplay:OnChanged(function()
    esp.settings.name.displaynames = Toggles.espdisplay.Value
end)

ESPSTab:AddToggle('espteamcheck', {Text = 'Team Check', Default = true})
Toggles.espteamcheck:OnChanged(function()
    esp.settings.teamcheck = Toggles.espteamcheck.Value
end)

local outlineToggle = ESPTab:AddToggle('esp_text_outline', {
    Text = 'Text Outline', 
    Default = false
})

outlineToggle:OnChanged(function(val)
    textOutline.enabled = val
end)

local outlineColor = ESPTab:AddLabel('Outline Color')
outlineColor:AddColorPicker('esp_text_outline_color', {
    Default = C3(0, 0, 0),
    Title = 'Outline Color'
})

Options.esp_text_outline_color:OnChanged(function(val)
    textOutline.color = val
end)

ESPTab:AddSlider('esp_text_outline_thickness', {
    Text = 'Outline Thickness',
    Default = 1,
    Min = 1,
    Max = 3,
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    textOutline.thickness = val
end)

ESPTab:AddToggle('globalchams_enabled', {Text = 'Global Chams Enabled', Default = false})
Toggles.globalchams_enabled:OnChanged(function()
   globalChams.enabled = Toggles.globalchams_enabled.Value
end)

ESPTab:AddToggle('globalchams_team', {Text = 'Team Chams', Default = true})
Toggles.globalchams_team:OnChanged(function()
   globalChams.team = Toggles.globalchams_team.Value
end)

ESPTab:AddToggle('globalchams_me', {Text = 'Self Chams', Default = false})
Toggles.globalchams_me:OnChanged(function()
   globalChams.me = Toggles.globalchams_me.Value
end)

ESPTab:AddLabel('Team Color'):AddColorPicker('globalchams_teamcolor', {Default = C3(0, 100, 255), Title = 'Team Color'})
Options.globalchams_teamcolor:OnChanged(function()
    globalChams.teamColor = Options.globalchams_teamcolor.Value
end)

ESPTab:AddLabel('Enemy Color'):AddColorPicker('globalchams_enemycolor', {Default = C3(255, 0, 0), Title = 'Enemy Color'})
Options.globalchams_enemycolor:OnChanged(function()
    globalChams.enemyColor = Options.globalchams_enemycolor.Value
end)

ESPTab:AddLabel('Self Color'):AddColorPicker('globalchams_mecolor', {Default = C3(255, 255, 255), Title = 'Self Color'})
Options.globalchams_mecolor:OnChanged(function()
    globalChams.meColor = Options.globalchams_mecolor.Value
end)

ESPTab:AddToggle('chams_enabled', {Text = 'Chams', Default = false})
Toggles.chams_enabled:OnChanged(function()
   chams.enabled = Toggles.chams_enabled.Value
end)

ESPTab:AddToggle('chams_teamcheck', {Text = 'Chams Team Check', Default = true})
Toggles.chams_teamcheck:OnChanged(function()
   chams.teamcheck = Toggles.chams_teamcheck.Value
end)

local chams_fill_tog = ESPTab:AddToggle('chams_fill', {Text = 'Chams Fill', Default = true})
Toggles.chams_fill:OnChanged(function()
   chams.settings.fill.enabled = Toggles.chams_fill.Value
end)
chams_fill_tog:AddColorPicker('chams_fill_color', {Default = C3(255, 255, 255), Title = 'Fill Color'})
Options.chams_fill_color:OnChanged(function()
    chams.settings.fill.color = Options.chams_fill_color.Value
end)
ESPTab:AddSlider('chams_fill_transparency', {Text = 'Fill Transparency', Default = 50, Min = 0, Max = 100, Rounding = 0, Suffix = '%'})
Options.chams_fill_transparency:OnChanged(function()
    chams.settings.fill.transparency = Options.chams_fill_transparency.Value / 100
end)

local chams_glow_tog = ESPTab:AddToggle('chams_glow', {Text = 'Chams Glow', Default = true})
Toggles.chams_glow:OnChanged(function()
   chams.settings.glow.enabled = Toggles.chams_glow.Value
end)
chams_glow_tog:AddColorPicker('chams_glow_color', {Default = C3(255, 255, 255), Title = 'Glow Color'})
Options.chams_glow_color:OnChanged(function()
    chams.settings.glow.color = Options.chams_glow_color.Value
end)
ESPTab:AddSlider('chams_glow_transparency', {Text = 'Glow Transparency', Default = 30, Min = 0, Max = 100, Rounding = 0, Suffix = '%'})
Options.chams_glow_transparency:OnChanged(function()
    chams.settings.glow.transparency = Options.chams_glow_transparency.Value / 100
end)

LocalTab:AddToggle('local_thirdperson', {Text = 'Third Person', Default = false}):AddKeyPicker('local_thirdpersonbind', {Default = 'X', SyncToggleState = true, Mode = 'Toggle', Text = "Third Person", NoUI = false})
Toggles.local_thirdperson:OnChanged(function()
    if Toggles.local_thirdperson.Value == true then
        runService:BindToRenderStep("ThirdPerson", 100, function()
            if localPlayer.CameraMinZoomDistance ~= Options.local_thirdpersondist.Value then
                localPlayer.CameraMinZoomDistance = Options.local_thirdpersondist.Value
                localPlayer.CameraMaxZoomDistance = Options.local_thirdpersondist.Value
                workspace.ThirdPerson.Value = true
            end
            local arms = workspace.Camera:FindFirstChild("Arms")
            if arms then
                for _, part in ipairs(arms:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("MeshPart") then
                        part.Transparency = 1
                    end
                end
            end
        end)
    elseif Toggles.local_thirdperson.Value == false then
        runService:UnbindFromRenderStep("ThirdPerson")
        if IsAlive(localPlayer) then
            wait()
            workspace.ThirdPerson.Value = false
            localPlayer.CameraMinZoomDistance = 0
            localPlayer.CameraMaxZoomDistance = 0
            local arms = workspace.Camera:FindFirstChild("Arms")
            if arms then
                for _, part in ipairs(arms:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("MeshPart") then
                        part.Transparency = 0
                    end
                end
            end
        end
    end
end)
LocalTab:AddSlider('local_thirdpersondist', {Text = 'Distance', Default = 15, Min = 1, Max = 50, Rounding = 0, Compact = false}):OnChanged(function() end)

local selfchmams = LocalTab:AddToggle('local_selfchams', {Text = 'Self Chams', Default = false,})
Toggles.local_selfchams:OnChanged(function()
    while wait() do
        if not Toggles.local_selfchams.Value then break end
        if IsAlive(localPlayer) then
            local chams = Instance.new("Highlight", localPlayer.Character)
            chams.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            chams.FillColor = Options.selfchams_fill.Value
            chams.FillTransparency = 0.25
            chams.OutlineColor = Options.selfchams_outline.Value
            chams.FillTransparency = 0.5
        end
    end
end)
selfchmams:AddColorPicker('selfchams_fill', {Default = C3(0, 0, 255), Title = 'Fill Color'})
selfchmams:AddColorPicker('selfchams_outline', {Default = C3(0, 0, 0), Title = 'Outline Color'})
CamTab:AddToggle('cam_fovenabled', {Text = 'Override FOV', Default = false}):OnChanged(function() end)
CamTab:AddSlider('cam_fovvalue', {Text = 'FOV', Default = 70, Min = 60, Max = 120, Rounding = 0, Compact = false}):OnChanged(function() end)
CamTab:AddToggle('cam_sway', {Text = 'Disable Weapon Swaying', Default = false}):OnChanged(function() end)
CamTab:AddToggle('cam_forcecross', {Text = 'Force Crosshair', Default = false}):OnChanged(function() end)
CamTab:AddToggle('cam_flash', {Text = 'Remove Flash', Default = false})
Toggles.cam_flash:OnChanged(function()
    if Toggles.cam_flash.Value == true then
        localPlayer.PlayerGui.Blnd.Enabled = false
    elseif Toggles.cam_flash.Value == false then
        localPlayer.PlayerGui.Blnd.Enabled = true
    end
end)
CamTab:AddToggle('cam_smoke', {Text = 'Reduce Smoke', Default = false}):OnChanged(function() end)
CamTab:AddSlider('cam_smokereduce', {Text = 'Value', Default = 100, Min = 1, Max = 100, Rounding = 0, Compact = false}):OnChanged(function() end)
CamTab:AddLabel('Aura Color'):AddColorPicker('cam_smokeauracolor', {Default = C3(255, 0, 0), Title = 'Smoke Aura Color'})
VWTab:AddToggle('vw_enabled', {Text = 'Enabled', Default = false}):OnChanged(function() end)
local vmx = VWTab:AddSlider('vw_x', {Text = 'X', Default = 0, Min = -360, Max = 360, Rounding = 0, Compact = false}):OnChanged(function() end)
local vmy = VWTab:AddSlider('vw_y', {Text = 'Y', Default = 0, Min = -360, Max = 360, Rounding = 0, Compact = false}):OnChanged(function() end)
local vmz = VWTab:AddSlider('vw_z', {Text = 'Z', Default = 0, Min = -360, Max = 360, Rounding = 0, Compact = false}):OnChanged(function() end)
local vmroll = VWTab:AddSlider('vw_roll', {Text = 'Roll', Default = 180, Min = 0, Max = 360, Rounding = 0, Compact = false}):OnChanged(function() end)
VWTab:AddButton('Reset Values', function() 
    vmx:SetValue(0)
    vmy:SetValue(0)
    vmz:SetValue(0)
    vmroll:SetValue(180)
end)
local ambienttog = WRLTab:AddToggle('wrl_ambient', {Text = 'Ambience', Default = false})
ambienttog:AddColorPicker('wrl_ambient1', {Default = C3(75, 58, 222), Title = 'Ambient'})
ambienttog:AddColorPicker('wrl_ambient2', {Default = C3(109, 58, 206), Title = 'Outdoor'})

WRLTab:AddToggle('wrl_shadows', {Text = 'Shadow Map', Default = false}):OnChanged(function(val)
    
end)

WRLTab:AddToggle('wrl_forcetime', {Text = 'Force Time', Default = false}):OnChanged(function() end)
WRLTab:AddSlider('wrl_forcetimevalue', {Text = 'Time', Default = 12, Min = 0, Max = 24, Rounding = 0, Compact = false}):OnChanged(function() end)

WRLTab:AddToggle('wrl_saturation', {Text = 'Saturation', Default = false}):OnChanged(function(val)
    if val == true then
        saturationeffect.Enabled = true
    elseif val == false then
        saturationeffect.Enabled = false
    end
end)
WRLTab:AddSlider('wrl_saturationvalue', {Text = 'Value', Default = 0, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function(val)
    saturationeffect.Saturation = val
end)

WRLTab:AddToggle('wrl_skyboxenabled', {Text = 'Skybox', Default = false}):OnChanged(function() end)
WRLTab:AddDropdown('wrl_skyboxtype', {Values = {"Galaxy","Pink Sky","Sunset","Night","Evening","Purple Nebula","Night Sky","Pink Daylight","Morning Glow","Setting Sun","Fade Blue","Elegant Morning","Neptune","Redshift","Aesthetic Night"}, Default = 1, Multi = false, Text = 'Selected'})
Options.wrl_skyboxtype:OnChanged(function()
    if Toggles.wrl_skyboxenabled.Value == true then
        local pepsisky = lighting:FindFirstChild("pepsisky") or Instance.new("Sky")
        pepsisky.Parent = game.Lighting
        pepsisky.Name = "pepsisky"
        pepsisky.SkyboxBk = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxBk
        pepsisky.SkyboxDn = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxDn
        pepsisky.SkyboxFt = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxFt
        pepsisky.SkyboxLf = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxLf
        pepsisky.SkyboxRt = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxRt
        pepsisky.SkyboxUp = SkyboxesTable[Options.wrl_skyboxtype.Value].SkyboxUp
    else
        if game.Lighting:FindFirstChild("pepsisky") then
            game.Lighting.pepsisky:Destroy()
        end
    end
end)

WRLTab:AddToggle('wrl_bloom', {
    Text = 'Bloom Effect', 
    Default = false
}):OnChanged(function(val)
    if val then
        bloomEffect.Parent = currentCamera
        bloomEffect.Enabled = true
    else
        bloomEffect.Parent = nil
        bloomEffect.Enabled = false
    end
end)

WRLTab:AddSlider('wrl_bloom_intensity', {
    Text = 'Bloom Intensity', 
    Default = 50, 
    Min = 0, 
    Max = 100, 
    Rounding = 0,
    Suffix = '%',
    Compact = false
}):OnChanged(function(val)
    bloomEffect.Intensity = val / 100
end)

WRLTab:AddSlider('wrl_bloom_size', {
    Text = 'Bloom Size', 
    Default = 24, 
    Min = 1, 
    Max = 50, 
    Rounding = 0,
    Compact = false
}):OnChanged(function(val)
    bloomEffect.Size = val
end)

WRLTab:AddSlider('wrl_bloom_threshold', {
    Text = 'Bloom Threshold', 
    Default = 90, 
    Min = 0, 
    Max = 100, 
    Rounding = 0,
    Suffix = '%',
    Compact = false
}):OnChanged(function(val)
    bloomEffect.Threshold = val / 100
end)

MiscTab:AddToggle('misc_molly', {Text = 'Visualize Molly Radius', Default = false}):OnChanged(function(val)
    if val == true then 
        for i, molly in pairs(rayignore:FindFirstChild("Fires"):GetChildren()) do 
            molly.Transparency = 0
            molly.Color = Options.misc_mollycolor.Value
        end 
    else 
        for i, molly in pairs(rayignore:FindFirstChild("Fires"):GetChildren()) do 
            molly.Transparency = 1 
        end 
    end
end)
MiscTab:AddLabel('Color'):AddColorPicker('misc_mollycolor', {Default = C3(255, 0, 0), Title = 'Molly Color'})

local blurvalue = 50
local lv = Vector3.zero
MiscTab:AddToggle('misc_motionenabled', {Text = 'Motion Blur', Default = false}):OnChanged(function(val)
    Blur.Enabled = val
end)
MiscTab:AddSlider('misc_motionvalue', {Text = 'Size', Default = 50, Min = 1, Max = 100, Rounding = 0, Compact = false}):OnChanged(function(val)
    blurvalue = val
end)

MiscTab:AddToggle('FootTrailEnabled', {
    Text = 'Enabled',
    Default = false,
    Tooltip = 'Toggle foot trail'
})

MiscTab:AddLabel('Trail Color'):AddColorPicker('FootTrailColor', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = 'Trail Color'
})

MiscTab:AddSlider('FootTrailLength', {
    Text = 'Trail Length',
    Default = 50,
    Min = 10,
    Max = 100,
    Rounding = 0,
    Compact = false
})

MiscTab:AddSlider('FootTrailLifetime', {
    Text = 'Trail Lifetime (sec)',
    Default = 5,
    Min = 1,
    Max = 10,
    Rounding = 0,
    Compact = false
})

Toggles.FootTrailEnabled:OnChanged(function()
    footTrail.Enabled = Toggles.FootTrailEnabled.Value
end)

Options.FootTrailColor:OnChanged(function()
    footTrail.Color = Options.FootTrailColor.Value
end)

Options.FootTrailLength:OnChanged(function()
    footTrail.Length = Options.FootTrailLength.Value
end)

Options.FootTrailLifetime:OnChanged(function()
    footTrail.Lifetime = Options.FootTrailLifetime.Value
end)

MiscTab:AddToggle('he_visualizer_enabled', {
    Text = 'HE Grenade Visualizer', 
    Default = false
}):OnChanged(function(val)
    grenadeVisualizer.enabled = val
    if not val then
        local debris = workspace:FindFirstChild("Debris")
        if debris then
            for _, obj in pairs(debris:GetChildren()) do
                local visualizer = obj:FindFirstChild("HEVisualizer")
                if visualizer then
                    visualizer:Destroy()
                end
            end
        end
    end
end)

MiscTab:AddLabel('Visualizer Color'):AddColorPicker('he_visualizer_color', {
    Default = C3(255, 255, 255),
    Title = 'Visualizer Color'
})

MiscTab:AddSlider('he_visualizer_transparency', {
    Text = 'Transparency', 
    Default = 50, 
    Min = 0, 
    Max = 100, 
    Rounding = 0,
    Compact = false
})



Options.he_visualizer_color:OnChanged(function(val)
    grenadeVisualizer.color = val
end)

Options.he_visualizer_transparency:OnChanged(function(val)
    grenadeVisualizer.transparency = val / 100
end)

WRLTab:AddToggle('wrl_atmosphere', {Text = 'Atmosphere Fog', Default = false}):OnChanged(function(val)
    if val then
        atmosphere.Parent = lighting
        atmosphere.Density = Options.wrl_atmosphere_density.Value
        atmosphere.Offset = Options.wrl_atmosphere_offset.Value
        atmosphere.Haze = Options.wrl_atmosphere_haze.Value
        atmosphere.Glare = Options.wrl_atmosphere_glare.Value
        atmosphere.Color = Options.wrl_atmosphere_color.Value
        atmosphere.Decay = Options.wrl_atmosphere_decay.Value
        
        wait(1)
        atmosphere.Parent = lighting
    else
        atmosphere.Parent = nil
    end
end)

WRLTab:AddSlider('wrl_atmosphere_density', {
    Text = 'Fog Density', 
    Default = 0, 
    Min = 0, 
    Max = 1, 
    Rounding = 2, 
    Compact = false
}):OnChanged(function(val)
    atmosphere.Density = val
end)

WRLTab:AddSlider('wrl_atmosphere_offset', {
    Text = 'Fog Offset', 
    Default = 0, 
    Min = 0, 
    Max = 1, 
    Rounding = 2, 
    Compact = false
}):OnChanged(function(val)
    atmosphere.Offset = val
end)

WRLTab:AddSlider('wrl_atmosphere_haze', {
    Text = 'Fog Haze', 
    Default = 0, 
    Min = 0, 
    Max = 1, 
    Rounding = 2, 
    Compact = false
}):OnChanged(function(val)
    atmosphere.Haze = val
end)

WRLTab:AddSlider('wrl_atmosphere_glare', {
    Text = 'Fog Glare', 
    Default = 0, 
    Min = 0, 
    Max = 1, 
    Rounding = 2, 
    Compact = false
}):OnChanged(function(val)
    atmosphere.Glare = val
end)

WRLTab:AddLabel('Fog Color'):AddColorPicker('wrl_atmosphere_color', {
    Default = Color3.fromRGB(199, 199, 199), 
    Title = 'Fog Color'
})

WRLTab:AddLabel('Fog Decay'):AddColorPicker('wrl_atmosphere_decay', {
    Default = Color3.fromRGB(199, 199, 199), 
    Title = 'Fog Decay'
})

Options.wrl_atmosphere_color:OnChanged(function(val)
    atmosphere.Color = val
end)

Options.wrl_atmosphere_decay:OnChanged(function(val)
    atmosphere.Decay = val
end)

WRLTab:AddToggle('wrl_material_color', {Text = 'Material Color', Default = false}):OnChanged(function(val)
    materialColor.enabled = val
    if val then
        wait(1)
        changeMapMaterials()
        
        local currentMap = workspace:FindFirstChild("Map")
        if currentMap then
            materialColor.appliedMaps[currentMap] = nil
            changeMapMaterials()
        end
    else
        restoreMapMaterials()
    end
end)

local materialColorToggle = WRLTab:AddToggle('wrl_material_custom_color', {Text = 'Custom Color', Default = false})
materialColorToggle:OnChanged(function(val)
    if val then
        materialColor.color = Options.wrl_material_color_picker.Value
    else
        materialColor.color = C3(200, 200, 200)
    end
    if materialColor.enabled then
        changeMapMaterials()
    end
end)

materialColorToggle:AddColorPicker('wrl_material_color_picker', {
    Default = C3(200, 200, 200),
    Title = 'Material Color'
})

Options.wrl_material_color_picker:OnChanged(function(val)
    if Toggles.wrl_material_custom_color.Value then
        materialColor.color = val
        if materialColor.enabled then
            changeMapMaterials()
        end
    end
end)

WRLTab:AddDropdown('wrl_material_type', {
    Text = 'Material Type',
    Default = 'SmoothPlastic',
    Values = {
        'SmoothPlastic',
        'Plastic', 
        'Neon',
        'Metal',
        'Wood',
        'Concrete',
        'Granite',
        'Marble'
    }
}):OnChanged(function(val)
    materialColor.material = Enum.Material[val]
    if materialColor.enabled then
        changeMapMaterials()
    end
end)

WRLTab:AddButton('Refresh Materials', function()
    if materialColor.enabled then
        changeMapMaterials()
    end
end)

WRLTab:AddButton('Restore Original', function()
    restoreMapMaterials()
    if materialColor.enabled then
        changeMapMaterials()
    end
end)

BulletsTab:AddToggle('bullets_btenabled', {
    Text = 'Bullet Tracer', 
    Default = false
}):OnChanged(function(val)
    bulletTracers.enabled = val
    applyBulletTracerSettings()
end)

BulletsTab:AddSlider('bullets_bttime', {
    Text = 'Tracers Life Time', 
    Default = 1.0, 
    Min = 0.5, 
    Max = 5.0, 
    Rounding = 1,
    Compact = false
}):OnChanged(function(val)
    updateTrailLifetime(val)
end)

BulletsTab:AddLabel('Tracer Color'):AddColorPicker('bullets_btcolor', {
    Default = Color3.new(1, 1, 1),
    Title = 'Tracer Color'
})

Options.bullets_btcolor:OnChanged(function(val)
    updateTrailColor(val)
end)

BulletsTab:AddSlider('bullets_btwidth', {
    Text = 'Tracer Width', 
    Default = 0.03, 
    Min = 0.01, 
    Max = 0.1, 
    Rounding = 2,
    Suffix = '',
    Compact = false
}):OnChanged(function(val)
    updateTrailWidth(val)
end)

BulletsTab:AddToggle('bullets_weapon_tracers', {
    Text = 'Tracers for All Weapons', 
    Default = false
}):OnChanged(function(val)
    weaponTracers.enabled = val
    applyWeaponTracers()
    
    if val then
        Library:Notify("Weapon tracers enabled")
    else
        Library:Notify("Weapon tracers disabled")
    end
end)
--------------------------------------------------------------------------------------

MiscSec1:AddToggle('misc_oldsounds', {Text = 'Old Gun Sounds', Default = false})

MiscSec1:AddToggle('misc_lastvk', {Text = 'Rejoin on Last VK', Default = false})
Toggles.misc_lastvk:OnChanged(function()
    if Toggles.misc_lastvk.Value == true then
        game.ReplicatedStorage.Events.SendMsg.OnClientEvent:Connect(function(message)
            local msg = string.split(message, " ")
            if game.Players:FindFirstChild(msg[1]) and msg[7] == "1" and msg[12] == game.Players.LocalPlayer.Name then
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
            end
        end)
    end
end)

MiscSec1:AddToggle('spectator_list_enabled', {
    Text = 'Spectator List', 
    Default = false
}):OnChanged(function(val)
    spectatorGUI.Enabled = val
end)

MiscSec1:AddLabel('Text Color'):AddColorPicker('spectator_text_color', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = 'Text Color'
})

MiscSec1:AddLabel('Line Color'):AddColorPicker('spectator_line_color', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = 'Line Color'
})

MiscSec1:AddSlider('spectator_pos_x', {
    Text = 'Position X',
    Default = 1,
    Min = 0,
    Max = 100,
    Rounding = 0
})

MiscSec1:AddSlider('spectator_pos_y', {
    Text = 'Position Y', 
    Default = 42,
    Min = 0,
    Max = 100,
    Rounding = 0
})

Options.spectator_text_color:OnChanged(function(val)
    titleLabel.TextColor3 = val
end)

Options.spectator_line_color:OnChanged(function(val)
    whiteBar.BackgroundColor3 = val
end)

Options.spectator_pos_x:OnChanged(function(val)
    mainFrame.Position = UDim2.new(val/100, 0, mainFrame.Position.Y.Scale, mainFrame.Position.Y.Offset)
end)

Options.spectator_pos_y:OnChanged(function(val)
    mainFrame.Position = UDim2.new(mainFrame.Position.X.Scale, mainFrame.Position.X.Offset, val/100, 0)
end)

-- MiscSec1:AddToggle('misc_spectlist', {Text = 'Show Spectators List', Default = false}):AddColorPicker('misc_spectlistcolor', {Default = C3(2, 103, 172), Title = 'List Color'})

--[[MiscSec1:AddToggle('misc_spam', {Text = 'Spam Chat', Default = false})
Toggles.misc_spam:OnChanged(function()
    
end)
MiscSec1:AddDropdown('misc_spamtype', {Values = {'Ownage', 'Wow', "Skeet", "Godlike"}, Default = 1, Multi = false, Text = 'Spam Type'})
Options.misc_spamtype:OnChanged(function()
    if Options.misc_spamtype.Value == "Ownage" then
        ebsfx = 6887181639
    elseif Options.misc_spamtype.Value == "Wow" then
        ebsfx = 7872233648
    elseif Options.misc_spamtype.Value == "Skeet" then
        ebsfx = 5447626464
    elseif Options.misc_spamtype.Value == "Godlike" then
        ebsfx = 7463103082
    end
end)]]

MiscSec2:AddToggle('mov_bhop', {Text = 'Bunny Hop', Default = false})
MiscSec2:AddSlider('mov_bhopspeed', {Text = 'Bhop Speed', Default = 25, Min = 1, Max = 150, Rounding = 0, Compact = false})

local ebtog = MiscSec2:AddToggle('mov_edgebug', {Text = 'Edgebug', Default = false})
Toggles.mov_edgebug:OnChanged(function()
    ebenabled = Toggles.mov_edgebug.Value
end)

MiscSec2:AddLabel('Keybind'):AddKeyPicker('mov_edgebugbind', {Default = 'E', Mode = 'Hold', Text = 'Edgebug', NoUI = false})
Options.mov_edgebugbind:SetValue({ 'E', 'Hold' })

MiscSec2:AddToggle('mov_edgebugsound', {Text = 'Edgebug Sound', Default = false}):OnChanged(function() end)
MiscSec2:AddDropdown('eb_soundtype', {Values = {'Ownage', 'Wow', "Skeet", "Godlike"}, Default = 1, Multi = false, Text = 'Edgebug Sound'})
Options.eb_soundtype:OnChanged(function()
    if Options.eb_soundtype.Value == "Ownage" then
        ebsfx = 6887181639
    elseif Options.eb_soundtype.Value == "Wow" then
        ebsfx = 7872233648
    elseif Options.eb_soundtype.Value == "Skeet" then
        ebsfx = 5447626464
    elseif Options.eb_soundtype.Value == "Godlike" then
        ebsfx = 7463103082
    end
end)

MiscSec2:AddToggle('mov_jumpbug', {Text = 'Jumpbug', Default = false})
Toggles.mov_jumpbug:OnChanged(function()
end)
MiscSec2:AddLabel('Keybind'):AddKeyPicker('mov_jumpbugbind', {Default = 'R', Mode = 'Hold', Text = 'Edgebug', NoUI = false})
Options.mov_jumpbugbind:SetValue({ 'R', 'Hold' })

MiscSec2:AddToggle('mov_edgebugc', {Text = 'Edgebug Counter', Default = false})
Toggles.mov_edgebugc:OnChanged(function()
    ebcounter.Visible = Toggles.mov_edgebugc.Value
end)

MiscSec2:AddToggle('mov_edgebugchat', {Text = 'Show Edgebug Message', Default = false})
Toggles.mov_edgebugchat:OnChanged(function()
    ebenabled = Toggles.mov_edgebugchat.Value
end)

MiscSec2:AddToggle('mov_graph', {Text = 'Velocity Graph', Default = false}):AddColorPicker('mov_graphcolor', {Default = C3(255, 255, 255), Title = 'Graph Color'})
Toggles.mov_graph:OnChanged(function()
    while Toggles.mov_graph.Value do wait()
        local normalY = currentCamera.ViewportSize.Y-90
        local velocity = IsAlive(localPlayer) and math.floor(math.clamp((localPlayer.Character.HumanoidRootPart.Velocity * Vec3(1,0,1)).magnitude*14.85,0,400)) or 0
        if Toggles.mov_graph.Value then
            local width = 2
            local line = Drawing.new("Line")
            table.insert(graphLines, line)
            line.From = Vec2(currentCamera.ViewportSize.X/2 + 98, lastPos)
            line.To = Vec2(currentCamera.ViewportSize.X/2 + 100, normalY - (velocity/6.5))
            line.Thickness = 1
            line.Transparency = 1
            line.Color = Color3.new(1,1,1)
            line.Visible = true
            if #graphLines > 1 then
                if #graphLines > 110 then
                    graphLines[1]:Remove()
                    table.remove(graphLines,1)
                    for i = 2,8 do
                        graphLines[i].Transparency = i/10
                    end
                    local count = 0
                    for i=110,110-6,-1 do
                        count = count + 1
                        graphLines[i].Transparency = count/10
                    end
                    graphLines[110-7].Transparency = 1
                end
                for i,v in ipairs(graphLines) do
                    v.To = v.To - Vec2(2,0)
                    v.From = v.From - Vec2(2,0)
                    v.Color = Options.mov_graphcolor.Value
                end
            end
            lastPos = line.To.Y
            VelocityCounter.Visible = true
            VelocityCounter.Text = tostring(velocity)
        end
    end
end)
MiscSec2:AddToggle('misc_no_leg_anim', {Text = 'No Leg Animation', Default = false})

MiscSec3:AddToggle('tweaks_fire', {Text = 'No Fire Damage', Default = false})
MiscSec3:AddToggle('tweaks_fall', {Text = 'No Fall Damage', Default = false})
MiscSec3:AddToggle('tweaks_cash', {Text = 'Infinite Cash', Default = false})
MiscSec3:AddToggle('tweaks_duck', {Text = 'Infinite Duck', Default = false})
MiscSec3:AddToggle('tweaks_time', {Text = 'Infinite Buy Time', Default = false})
MiscSec3:AddToggle('tweaks_buy', {Text = 'Buy Anywhere', Default = false})

MiscSec4:AddToggle('hit_hitsound', {Text = 'Hit Sound', Default = false})
MiscSec4:AddDropdown('hit_hitsoundtype', {Values = {'Bameware', 'Bell', 'Bubble', 'Pick', 'Pop', 'Rust', 'Skeet', 'Neverlose', 'Minecraft', 'Agpa', 'Idk'}, Default = 1, Multi = false, Text = 'Hit Sound Type'})
Options.hit_hitsoundtype:OnChanged(function()
    if Options.hit_hitsoundtype.Value == "Bameware" then
        HitSoundType = 5709456554
    elseif Options.hit_hitsoundtype.Value == "Bell" then
        HitSoundType = 6534947240
    elseif Options.hit_hitsoundtype.Value == "Bubble" then
        HitSoundType = 6534947588
    elseif Options.hit_hitsoundtype.Value == "Pick" then
        HitSoundType = 1347140027    
    elseif Options.hit_hitsoundtype.Value == "Pop" then
        HitSoundType = 198598793
    elseif Options.hit_hitsoundtype.Value == "Rust" then
        HitSoundType = 1255040462 
    elseif Options.hit_hitsoundtype.Value == "Skeet" then
        HitSoundType = 5633695679
    elseif Options.hit_hitsoundtype.Value == "Neverlose" then
        HitSoundType = 6534948092
    elseif Options.hit_hitsoundtype.Value == "Minecraft" then
        HitSoundType = 4018616850
    elseif Options.hit_hitsoundtype.Value == "Agpa" then
        HitSoundType = 102651850556408
    elseif Options.hit_hitsoundtype.Value == "Idk" then
        HitSoundType = 130951116162747
    end
end)

MiscSec4:AddSlider('hit_hitsound_volume', {
    Text = 'HitSound Volume', 
    Default = 3, 
    Min = 1, 
    Max = 10, 
    Rounding = 0,
    Compact = false
})

MiscSec4:AddToggle('hit_killsound', {Text = 'Kill Sound', Default = false})
MiscSec4:AddDropdown('hit_killsoundtype', {Values = {'1 Sit', 'UltraKill', 'Minecraft'}, Default = 1, Multi = false, Text = 'Kill Sound Type'})
Options.hit_killsoundtype:OnChanged(function()
    if Options.hit_killsoundtype.Value == "1 Sit" then
        KillSoundType = 5902468562
    elseif Options.hit_killsoundtype.Value == "UltraKill" then
        KillSoundType = 937885646
    elseif Options.hit_killsoundtype.Value == "Minecraft" then
        KillSoundType = 6705984236
    end
end)

MiscSec4:AddSlider('hit_killsound_volume', {
    Text = 'KillSound Volume', 
    Default = 3, 
    Min = 1, 
    Max = 10, 
    Rounding = 0,
    Compact = false
})

MiscSec4:AddToggle('hit_hitmarker', {Text = 'Hit Marker', Default = false}):AddColorPicker('hit_hitmarkercolor', {Default = C3(255, 255, 255), Title = 'Hit Marker Color'})
MiscSec4:AddToggle('hit_killsay', {Text = 'Kill Say', Default = false})
MiscSec4:AddInput('killsay_msg', {Default = 'sit', Numeric = false, Finished = false, Text = 'Message', Placeholder = 'Message'})
MiscSec4:AddToggle('kill_all', {Text = 'Kill All', Default = false})
Toggles.kill_all:OnChanged(function()
    if Toggles.kill_all.Value then
        Library:Notify("Kill All enabled")
    else
        Library:Notify("Kill All disabled")
    end
end)

MiscSec4:AddToggle('name_changer_enabled', {Text = 'Name Changer', Default = false})
MiscSec4:AddInput('name_changer_text', {
    Default = 't.me/EnternalCheats',
    Numeric = false,
    Finished = true,
    Text = 'New Name',
    Placeholder = 'Enter new name'
})

Toggles.name_changer_enabled:OnChanged(function()
    nameChangerEnabled = Toggles.name_changer_enabled.Value
    Library:Notify(nameChangerEnabled and "Name Changer enabled" or "Name Changer disabled")
end)

Options.name_changer_text:OnChanged(function()
    getgenv().newname = Options.name_changer_text.Value
end)
 
MiscSec4:AddToggle('character_changer_enabled', {Text = 'Character Changer', Default = false})
MiscSec4:AddInput('character_changer_id', {
    Default = '4125771028',
    Numeric = true,
    Finished = true,
    Text = 'ID',
    Placeholder = 'Enter ID'
})

Toggles.character_changer_enabled:OnChanged(function()
    if Toggles.character_changer_enabled.Value then
        local userId = tonumber(Options.character_changer_id.Value) -- Добавляем tonumber здесь тоже
        if userId and userId > 0 then
            pcall(function()
                ChangeCharacterToUserIdAvatar(userId)
                Library:Notify("Character changed successfully")
            end)
        end
    else
        Library:Notify("Character Changer disabled")
    end
end)

SetupCharacterChangerLoop()

MiscSec5:AddButton('Anti Blood Lag', function() 
    local senv = getsenv(localPlayer.PlayerGui.Client)senv.splatterBlood = function() end
end)
MiscSec6:AddToggle('mod_nospread', {Text = 'No Spread', Default = false})
MiscSec6:AddToggle('mod_norecoil', {Text = 'No Recoil', Default = false})
MiscSec6:AddToggle('mod_fastfire', {Text = 'Fast Fire Rate', Default = false})
MiscSec6:AddToggle('mod_infammo', {Text = 'Infinity Ammo', Default = false})

Toggles.mod_nospread:OnChanged(function()
    gunModsEnabled.no_spread = Toggles.mod_nospread.Value
    ApplyGunMods()
end)

Toggles.mod_norecoil:OnChanged(function()
    gunModsEnabled.no_recoil = Toggles.mod_norecoil.Value
    ApplyGunMods()
end)

Toggles.mod_fastfire:OnChanged(function()
    gunModsEnabled.fast_firerate = Toggles.mod_fastfire.Value
    ApplyGunMods()
end)

Toggles.mod_infammo:OnChanged(function()
    gunModsEnabled.infinity_ammo = Toggles.mod_infammo.Value
    ApplyGunMods()
end)

MiscSec1:AddButton('Unlock All Skins', function() 
    loadstring(game:HttpGet("https://pastebin.com/raw/Qu9inv8N", true))() 
end)

MiscSec1:AddButton('Funswapper', function() 
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Funswapper/Funswapper-Script/refs/heads/main/Variants/V1.lua", true))()
end)

------------------------------------ WATERMARK ------------------------------------
local WATERMARK_TEXT = "EnternalCheats | Build v1.1 | FPS: %d | Ping: %dms"
local WATERMARK_POSITION = UDim2.new(0, 10, 0, 10)

Library:SetWatermarkVisibility(true)
Library.Watermark.Position = WATERMARK_POSITION

local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter = FrameCounter + 1
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
        Library:SetWatermark(string.format(WATERMARK_TEXT, 
            math.floor(FPS),
            math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
        ))
    end
end)

--------------------------------------------------------------------------------------
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings() 

SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

ThemeManager:SetFolder('enternalcheats')
SaveManager:SetFolder('enternalcheats/main')

SaveManager:BuildConfigSection(Tabs['UI Settings']) 

ThemeManager:ApplyToTab(Tabs['UI Settings'])

local OthersSettings = Tabs['UI Settings']:AddRightGroupbox('Others')

OthersSettings:AddButton('Rejoin', function() 
    local ts = game:GetService("TeleportService")
    local p = game:GetService("Players").LocalPlayer
    ts:Teleport(game.PlaceId, p)
end)

OthersSettings:AddButton('Copy Game Invite', function() 
    setclipboard("Roblox.GameLauncher.joinGameInstance("..game.PlaceId..", "..game.JobId.."')")
end)

local bubbleArt = [[
    
    ___       ___       ___       ___       ___       ___       ___       ___   
   /\  \     /\__\     /\  \     /\  \     /\  \     /\__\     /\  \     /\__\  
  /::\  \   /:| _|_    \:\  \   /::\  \   /::\  \   /:| _|_   /::\  \   /:/  /  
 /::\:\__\ /::|/\__\   /::\__\ /::\:\__\ /::\:\__\ /::|/\__\ /::\:\__\ /:/__/   
 \:\:\/  / \/|::/  /  /:/\/__/ \:\:\/  / \;:::/  / \/|::/  / \/\::/  / \:\  \   
  \:\/  /    |:/  /   \/__/     \:\/  /   |:\/__/    |:/  /    /:/  /   \:\__\  
   \/__/     \/__/               \/__/     \|__|     \/__/     \/__/     \/__/  
]]

print(bubbleArt)
------------------------------------ HOOK ------------------------------------
local BeamPart = Instance.new("Part", workspace)

BeamPart.Name = "BeamPart"
BeamPart.Transparency = 1

function createBeam(v1, v2)
    local colorSequence = CNew({
    ColorSequenceKeypoint.new(0, Options.bullets_btcolor.Value),
    ColorSequenceKeypoint.new(1, Options.bullets_btcolor.Value),
    })

    local Part = Instance.new("Part", BeamPart)
    Part.Size = Vec3(1, 1, 1)
    Part.Transparency = 1
    Part.CanCollide = false
    Part.CFrame = CFrame.new(v1)
    Part.Anchored = true

    local Attachment = Instance.new("Attachment", Part)

    local Part2 = Instance.new("Part", BeamPart)
    Part2.Size = Vec3(1, 1, 1)
    Part2.Transparency = 1
    Part2.CanCollide = false
    Part2.CFrame = CFrame.new(v2)
    Part2.Anchored = true
    Part2.Color = C3(255, 255, 255)

    local Attachment2 = Instance.new("Attachment", Part2)

    local Beam = Instance.new("Beam", Part)
    Beam.FaceCamera = true
    Beam.Color = colorSequence
    Beam.Attachment0 = Attachment
    Beam.Attachment1 = Attachment2
    Beam.LightEmission = 6
    Beam.LightInfluence = 1
    Beam.Width0 = 1
    Beam.Width1 = 0.6
    Beam.Texture = "rbxassetid://"..bullettracerstexture
    Beam.LightEmission = 1
    Beam.LightInfluence = 1
    Beam.TextureMode = Enum.TextureMode.Wrap
    Beam.TextureLength = 3
    Beam.TextureSpeed = 3
    delay(Options.bullets_bttime.Value, function()
    for i = 0.5, 1, 0.02 do
    wait()
    Beam.Transparency = NumberSequence.new(i)
    end
    Part:Destroy()
    Part2:Destroy()
    end)
end

function CreateBulletImpact(pos)
    local BulletImpacts = Instance.new("Part")
    BulletImpacts.Anchored = true
    BulletImpacts.CanCollide = false
    BulletImpacts.Material = "ForceField"
    BulletImpacts.Color = Options.bullets_impactenabledcolor.Value
    BulletImpacts.Size = Vec3(0.25, 0.25, 0.25)
    BulletImpacts.Position = pos
    BulletImpacts.Name = "BulletImpacts"
    BulletImpacts.Parent = currentCamera
    wait(Options.bullets_impacttime.Value)
    BulletImpacts:Destroy()
end
-- // HOOKS :SUNGLASSES:
local meta = getrawmetatable(game)
local OldNameCall = nil
local oldNewindex = meta.__newindex
local oldIndex = meta.__index
local old = meta.__namecall
hookfunction(getrenv().xpcall, function() end)
setreadonly(meta, false)
newindex = hookfunction(meta.__newindex, function(self, idx, val)
    local method = getnamecallmethod()
    if self.Name == "Crosshair" and idx == "Visible" and val == false and localPlayer.PlayerGui.GUI.Crosshairs.Scope.Visible == false and Toggles.cam_forcecross.Value == true then
        val = true
    end
    return newindex(self,idx,val)
end)

meta.__index = newcclosure(function(self, key)
    if key == "Value" then
        if Toggles.tweaks_time.Value and self.Name == "BuyTime" then
            return 5
        end
    end
    return oldIndex(self, key)
end)

meta.__namecall = newcclosure(function(self, ...)
    local args = {...}
    
    if getnamecallmethod() == "SetPrimaryPartCFrame" then
        if self.Name == "Arms" and Toggles.vw_enabled.Value then
            local vwarg = args[1]
            vwarg = vwarg * CFrame.new(Vector3.new(math.rad(Options.vw_x.Value-180),math.rad(Options.vw_y.Value-180),math.rad(Options.vw_z.Value-180))) * CFrame.Angles(0, 0, math.rad(Options.vw_roll.Value-180))
            return old(self, vwarg, select(2, ...))
        end
    end
    if not checkcaller() then
        if getnamecallmethod() == "FindPartOnRayWithWhitelist" and not checkcaller() and cbClient.gun ~= "none" and cbClient.gun.Name ~= "C4" then 
            if #args[2] == 1 and args[2][1].Name == "SpawnPoints" then 
                local Team = localPlayer.Status.Team.Value 
                if Toggles.tweaks_buy.Value then
                    return Team == "T" and args[2][1].BuyArea or args[2][1].BuyArea2 
                end
            end
        end
        if self.Name == "BURNME" and Toggles.tweaks_fire.Value then
            return
        elseif self.Name == "FallDamage" and Toggles.tweaks_fall.Value then
            return
        elseif getnamecallmethod() == "FireServer" and self.Name == "HitPart" then
            spawn(function()
            end)
        end
    end
    return old(self, ...)
end)


local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
    local Method = getnamecallmethod()
    local Arguments = {...}
    local self = Arguments[1]
    local chance = CalculateChance(SilentAimSettings.HitChance)
    if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
        if Method == "FindPartOnRayWithIgnoreList" and SilentAimSettings.SilentAimMethod == Method then
            if ValidateArguments(Arguments, ExpectedArguments.FindPartOnRayWithIgnoreList) then
                local A_Ray = Arguments[2]

                local HitPart = getClosestPlayer()
                if HitPart then
                    local Origin = A_Ray.Origin
                    local Direction = getDirection(Origin, HitPart.Position)
                    Arguments[2] = Ray.new(Origin, Direction)

                    return oldNamecall(unpack(Arguments))
                end
            end
        end
    end
    return oldNamecall(...)
end))
------------------------------------ MAIN FUNC ------------------------------------

localPlayer.Status.Kills.Changed:Connect(function(val)
    if Toggles.hit_killsound.Value and val ~= 0 then
        local killsound = Instance.new("Sound")
        killsound.Parent = game:GetService("SoundService")
        killsound.SoundId = 'rbxassetid://'..KillSoundType
        killsound.Volume = Options.hit_killsound_volume.Value
        killsound:Play()
    end
    
    if Toggles.hit_killsay.Value and val ~= 0 then
        game.ReplicatedStorage.Events.PlayerChatted:FireServer(Options.killsay_msg.Value, false, false, false, true)
    end
end)

localPlayer.Additionals.TotalDamage.Changed:Connect(function(val)
    if Toggles.hit_hitsound.Value and val ~= 0 then
        local hitsound = Instance.new("Sound")
        hitsound.Parent = game:GetService("SoundService")
        hitsound.SoundId = 'rbxassetid://'..HitSoundType
        hitsound.Volume = Options.hit_hitsound_volume.Value
        hitsound:Play()
    end

    if current == 0 then return end
    coroutine.wrap(function()
        if Toggles.hit_hitmarker.Value then
            local Line = Drawing.new("Line")
            local Line2 = Drawing.new("Line")
            local Line3 = Drawing.new("Line")
            local Line4 = Drawing.new("Line")

            local x, y = currentCamera.ViewportSize.X/2, currentCamera.ViewportSize.Y/2

            Line.From = Vec2(x + 4, y + 4)
            Line.To = Vec2(x + 10, y + 10)
            Line.Color = Options.hit_hitmarkercolor.Value
            Line.Visible = true 

            Line2.From = Vec2(x + 4, y - 4)
            Line2.To = Vec2(x + 10, y - 10)
            Line2.Color = Options.hit_hitmarkercolor.Value
            Line2.Visible = true 

            Line3.From = Vec2(x - 4, y - 4)
            Line3.To = Vec2(x - 10, y - 10)
            Line3.Color = Options.hit_hitmarkercolor.Value
            Line3.Visible = true 

            Line4.From = Vec2(x - 4, y + 4)
            Line4.To = Vec2(x - 10, y + 10)
            Line4.Color = Options.hit_hitmarkercolor.Value
            Line4.Visible = true

            Line.Transparency = 1
            Line2.Transparency = 1
            Line3.Transparency = 1
            Line4.Transparency = 1

            Line.Thickness = 1
            Line2.Thickness = 1
            Line3.Thickness = 1
            Line4.Thickness = 1

            wait(0.3)
            for i = 1,0,-0.1 do
                wait()
                Line.Transparency = i 
                Line2.Transparency = i
                Line3.Transparency = i
                Line4.Transparency = i
            end
            Line:Remove()
            Line2:Remove()
            Line3:Remove()
            Line4:Remove()
        end
    end)()
end)



if rayignore:FindFirstChild("Smokes") then
    for _,smoke in pairs(rayignore:FindFirstChild("Smokes"):GetChildren()) do
        smoke.Material = Enum.Material.Neon
        smoke.Transparency = 0.5
    end
    rayignore:FindFirstChild("Smokes").ChildAdded:Connect(function(smoke)
        runService.RenderStepped:Wait()
        if Toggles.cam_smoke.Value then
            smoke.ParticleEmitter.Rate = Options.cam_smokereduce.Value
        end
        smoke.Material = Enum.Material.Neon
        smoke.Transparency = 0.5
        smoke.Color = Options.cam_smokeauracolor.Value
    end)
end
rayignore.ChildAdded:Connect(function(obj) 
    if obj.Name == "Fires" then 
        obj.ChildAdded:Connect(function(fire) 
            if Toggles.misc_molly.Value then 
                fire.Transparency = 0
                fire.Color = Options.misc_mollycolor.Value
            end 
        end) 
    end 
end)

if rayignore:FindFirstChild("Fires") then
    rayignore:FindFirstChild("Fires").ChildAdded:Connect(function(fire)
        if Toggles.misc_molly.Value then
            fire.Transparency = 0
            fire.Color = Options.misc_mollycolor.Value
        end
    end)
end

for i,v in pairs(game.ReplicatedStorage.Viewmodels:GetChildren()) do
    if v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.Transparency ~= 1 then
        v.HumanoidRootPart.Transparency = 1
    end
end
--------------------------------------------------------------------------------------
local function Combat()
    if not Toggles.as_enabled.Value and not Toggles.aim_Enabled.Value then return end

    if Toggles.as_enabled.Value then
        local pressed = userInput:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
        
        if pressed and IsAlive(localPlayer) then
            local Line = Drawing.new("Line")
            local curTar = getClosest(currentCamera.CFrame)
            local hbpos = currentCamera:WorldToScreenPoint(curTar.Character[AimSettings.Hitbox].Position)
            hbpos = Vec2(hbpos.X, hbpos.Y)
            if (hbpos - currentCamera.ViewportSize/2).Magnitude < AimSettings.Radius then
                currentCamera.CFrame = currentCamera.CFrame:Lerp(CFrame.new(currentCamera.CFrame.Position, curTar.Character[AimSettings.Hitbox].Position), AimSettings.Smoothness)
            end
        end
    end
    if Toggles.as_fov.Value == true and Toggles.as_fovout.Value == true then
       as_fov_circleout1.Visible = true
       as_fov_circleout2.Visible = true
    else
        as_fov_circleout1.Visible = false
        as_fov_circleout2.Visible = false
    end
    as_fov_circle.Visible = Toggles.as_fov.Value
    
    if Toggles.br_fov.Value == true and Toggles.br_fovout.Value == true then
       br_fov_circleout1.Visible = true
       br_fov_circleout2.Visible = true
    else
        br_fov_circleout1.Visible = false
        br_fov_circleout2.Visible = false
    end
    br_fov_circle.Visible = Toggles.br_fov.Value
    
    
    local mousepos = Vec2(userInput:GetMouseLocation().X, userInput:GetMouseLocation().Y)
    br_fov_circleout1.Position = mousepos
    br_fov_circle.Position = mousepos
    br_fov_circleout2.Position = mousepos
    
    as_fov_circleout1.Position = mousepos
    as_fov_circle.Position = mousepos
    as_fov_circleout2.Position = mousepos

    if Toggles.aim_Enabled.Value and Toggles.aim_autoshot.Value and IsAlive(localPlayer) then
        local target = getClosestPlayer()
        if target then
            local screenPos, onScreen = currentCamera:WorldToViewportPoint(target.Position)
            local mousePos = userInput:GetMouseLocation()
            local distance = (Vec2(screenPos.X, screenPos.Y) - mousePos).Magnitude
            
            if not Toggles.aim_use_fov.Value or (onScreen and distance <= SilentAimSettings.FOVRadius) then
                mouse1click()
            end
        end
    end
end

local function Visuals()
    if not Toggles.wrl_ambient.Value and not Toggles.wrl_forcetime.Value and 
       not Toggles.cam_fovenabled.Value and not Toggles.wrl_saturation.Value and
       not Toggles.wrl_atmosphere.Value and not Toggles.wrl_bloom.Value then return end

    if Toggles.wrl_ambient.Value then
        lighting.Ambient = Options.wrl_ambient1.Value
        lighting.OutdoorAmbient = Options.wrl_ambient2.Value
    else
        lighting.Ambient = C3(255, 255, 255)
        lighting.OutdoorAmbient = C3(255, 255, 255)
    end
    
    if Toggles.wrl_forcetime.Value then
        lighting.TimeOfDay = Options.wrl_forcetimevalue.Value
    else
        lighting.TimeOfDay = 12
    end
    
    if localPlayer.PlayerGui.GUI.Crosshairs.Scope.Visible == false then
        if Toggles.cam_fovenabled.Value then
            currentCamera.FieldOfView = Options.cam_fovvalue.Value
        else
            currentCamera.FieldOfView = 70
        end
    end
    
    local x,y,z = currentCamera.CFrame:ToEulerAnglesXYZ()
    x,y,z = math.deg(x),math.deg(y),math.deg(z)
    
    Blur.Size = math.clamp((Vec3(x,y,z)-lv).Magnitude/2,2,10 + blurvalue)
    lv = Vec3(x,y,z)

    if Toggles.wrl_ambient.Value then
        lighting.Ambient = Options.wrl_ambient1.Value
        lighting.OutdoorAmbient = Options.wrl_ambient2.Value
    else

        lighting.Ambient = Color3.fromRGB(127, 127, 127)
        lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
    end
    
    if Toggles.wrl_forcetime.Value then
        lighting.TimeOfDay = Options.wrl_forcetimevalue.Value
    else
        lighting.TimeOfDay = 14
    end

    if Toggles.wrl_saturation and Toggles.wrl_saturation.Value then
        if saturationeffect.Parent ~= currentCamera then
            saturationeffect.Parent = currentCamera
        end
        saturationeffect.Enabled = true
        saturationeffect.Saturation = Options.wrl_saturationvalue.Value
    else
        saturationeffect.Enabled = false
        saturationeffect.Parent = nil
    end
    
    if Toggles.wrl_atmosphere and Toggles.wrl_atmosphere.Value then
        atmosphere.Parent = lighting
        
        atmosphere.Density = Options.wrl_atmosphere_density.Value
        atmosphere.Offset = Options.wrl_atmosphere_offset.Value
        atmosphere.Haze = Options.wrl_atmosphere_haze.Value
        atmosphere.Glare = Options.wrl_atmosphere_glare.Value
        atmosphere.Color = Options.wrl_atmosphere_color.Value
        atmosphere.Decay = Options.wrl_atmosphere_decay.Value
        
    else
        if atmosphere.Parent == lighting then
            atmosphere.Parent = nil
        end
    end

    if Toggles.wrl_bloom and Toggles.wrl_bloom.Value then
        if bloomEffect.Parent ~= currentCamera then
            bloomEffect.Parent = currentCamera
        end
        bloomEffect.Enabled = true
        
        bloomEffect.Intensity = Options.wrl_bloom_intensity.Value / 100
        bloomEffect.Size = Options.wrl_bloom_size.Value
        bloomEffect.Threshold = Options.wrl_bloom_threshold.Value / 100
    else
        bloomEffect.Enabled = false
        if bloomEffect.Parent == currentCamera then
            bloomEffect.Parent = nil
        end
    end
end

workspace.ChildAdded:Connect(function(child)
    if child.Name == "Map" and Toggles.wrl_atmosphere and Toggles.wrl_atmosphere.Value then
        wait(2)
        if atmosphere.Parent ~= lighting then
            atmosphere.Parent = lighting
        end
        
        atmosphere.Density = Options.wrl_atmosphere_density.Value
        atmosphere.Offset = Options.wrl_atmosphere_offset.Value
        atmosphere.Haze = Options.wrl_atmosphere_haze.Value
        atmosphere.Glare = Options.wrl_atmosphere_glare.Value
        atmosphere.Color = Options.wrl_atmosphere_color.Value
        atmosphere.Decay = Options.wrl_atmosphere_decay.Value
    end
end)

spawn(function()
    while true do
        wait(5)
        if Toggles.wrl_atmosphere and Toggles.wrl_atmosphere.Value then
            if atmosphere.Parent ~= lighting then
                atmosphere.Parent = lighting
            end
            
            atmosphere.Density = Options.wrl_atmosphere_density.Value
            atmosphere.Offset = Options.wrl_atmosphere_offset.Value
            atmosphere.Haze = Options.wrl_atmosphere_haze.Value
            atmosphere.Glare = Options.wrl_atmosphere_glare.Value
            atmosphere.Color = Options.wrl_atmosphere_color.Value
            atmosphere.Decay = Options.wrl_atmosphere_decay.Value
        end
    end
end)

local function ESP()
    if not Toggles.espenabled.Value then return end

    if textOutline.enabled then
        for player, objects in pairs(esp.playerObjects) do
            if objects.nameScreenGui then
                local nameText = objects.nameScreenGui:FindFirstChild("NameText")
                if nameText then
                    nameText.TextStrokeColor3 = textOutline.color
                    nameText.TextStrokeTransparency = 0
                end
            end
            
            if objects.distanceScreenGui then
                local distanceText = objects.distanceScreenGui:FindFirstChild("DistanceText")
                if distanceText then
                    distanceText.TextStrokeColor3 = textOutline.color
                    distanceText.TextStrokeTransparency = 0
                end
            end
            
            if objects.healthScreenGui then
                local healthText = objects.healthScreenGui:FindFirstChild("HealthText")
                if healthText then
                    healthText.TextStrokeColor3 = textOutline.color
                    healthText.TextStrokeTransparency = 0
                end
            end
            
            if objects.weaponScreenGui then
                local weaponText = objects.weaponScreenGui:FindFirstChild("WeaponText")
                if weaponText then
                    weaponText.TextStrokeColor3 = textOutline.color
                    weaponText.TextStrokeTransparency = 0
                end
            end
        end
        
        for weapon, weaponData in pairs(esp.weaponObjects) do
            if weaponData.weaponScreenGui then
                local weaponText = weaponData.weaponScreenGui:FindFirstChild("WeaponText")
                if weaponText then
                    weaponText.TextStrokeColor3 = textOutline.color
                    weaponText.TextStrokeTransparency = 0
                end
                
                local ammoText = weaponData.weaponScreenGui:FindFirstChild("AmmoText")
                if ammoText then
                    ammoText.TextStrokeColor3 = textOutline.color
                    ammoText.TextStrokeTransparency = 0
                end
            end
        end
        
        if c4TimerText then
            c4TimerText.TextStrokeColor3 = textOutline.color
            c4TimerText.TextStrokeTransparency = 0
        end
    else
        for player, objects in pairs(esp.playerObjects) do
            if objects.nameScreenGui then
                local nameText = objects.nameScreenGui:FindFirstChild("NameText")
                if nameText then nameText.TextStrokeTransparency = 1 end
            end
            
            if objects.distanceScreenGui then
                local distanceText = objects.distanceScreenGui:FindFirstChild("DistanceText")
                if distanceText then distanceText.TextStrokeTransparency = 1 end
            end
            
            if objects.healthScreenGui then
                local healthText = objects.healthScreenGui:FindFirstChild("HealthText")
                if healthText then healthText.TextStrokeTransparency = 1 end
            end
            
            if objects.weaponScreenGui then
                local weaponText = objects.weaponScreenGui:FindFirstChild("WeaponText")
                if weaponText then weaponText.TextStrokeTransparency = 1 end
            end
        end
        
        for weapon, weaponData in pairs(esp.weaponObjects) do
            if weaponData.weaponScreenGui then
                local weaponText = weaponData.weaponScreenGui:FindFirstChild("WeaponText")
                if weaponText then weaponText.TextStrokeTransparency = 1 end
                
                local ammoText = weaponData.weaponScreenGui:FindFirstChild("AmmoText")
                if ammoText then ammoText.TextStrokeTransparency = 1 end
            end
        end
        
        if c4TimerText then
            c4TimerText.TextStrokeTransparency = 1
        end
    end

    for player, objects in pairs(esp.playerObjects) do
        if not players:FindFirstChild(player.Name) then
            if objects.healthBarGui then
                objects.healthBarGui:Destroy()
                objects.healthBarGui = nil
            end
            if objects.boxFillGui then
                objects.boxFillGui:Destroy()
                objects.boxFillGui = nil
            end
            esp.playerObjects[player] = nil
        elseif objects.healthBarGui then
            local character = player.Character
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                objects.healthBarGui.Enabled = false
                if objects.boxFillGui then objects.boxFillGui.Enabled = false end
            else
                local vector, onScreen = currentCamera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                if not onScreen then
                    objects.healthBarGui.Enabled = false
                    if objects.boxFillGui then objects.boxFillGui.Enabled = false end
                end
            end
        end
    end

    for player, objects in pairs(esp.playerObjects) do
        if not players:FindFirstChild(player.Name) then
            for objName, drawing in pairs(objects) do
                if typeof(drawing) == "table" and drawing.Remove then
                    pcall(function()
                        drawing:Remove()
                    end)
                end
            end
            esp.playerObjects[player] = nil
        end
    end

    esp.settings.healthbar.outline = Toggles.esphealthbar_outline.Value
    esp.settings.healthbar.thickness = Options.esphealthbar_thickness.Value
    
    for i,v in pairs(esp.playerObjects) do
        if not esp.HasCharacter(i) then
            v.name.Visible = false
            v.boxOutline.Visible = false
            v.box.Visible = false
            v.boxfill.Visible = false
            v.healthBarOutline.Visible = false
            v.healthBar.Visible = false
            v.healthText.Visible = false
            v.distance.Visible = false
            v.weaponText.Visible = false
            v.viewAngle.Visible = false
            v.tracer.Visible = false
            if v.nameScreenGui then v.nameScreenGui.Enabled = false end
            if v.distanceScreenGui then v.distanceScreenGui.Enabled = false end
            if v.healthScreenGui then v.healthScreenGui.Enabled = false end
            if v.weaponScreenGui then v.weaponScreenGui.Enabled = false end
            if v.weaponIconGui then v.weaponIconGui.Enabled = false end
            if v.boxFillGui then v.boxFillGui.Enabled = false end
        end
    
        if esp.HasCharacter(i) then
            local hum = i.Character.Humanoid
            local hrp = i.Character.HumanoidRootPart
            local head = i.Character.Head

            local Vector, onScreen = currentCamera:WorldToViewportPoint(i.Character.HumanoidRootPart.Position)
    
            local Size = (currentCamera:WorldToViewportPoint(hrp.Position - Vec3(0, 3, 0)).Y - currentCamera:WorldToViewportPoint(hrp.Position + Vec3(0, 2.6, 0)).Y) / 2
            local BoxSize = Vec2(math.floor(Size * 1.5), math.floor(Size * 1.9))
            local BoxPos = Vec2(math.floor(Vector.X - Size * 1.5 / 2), math.floor(Vector.Y - Size * 1.6 / 2))
            
            local BoxFillSize = Vec2(math.floor(Size * 1.5), math.floor(Size * 1.9))
            local BoxFillPos = Vec2(math.floor(Vector.X - Size * 1.5 / 2), math.floor(Vector.Y - Size * 1.6 / 2))

            local BottomOffset = BoxSize.Y + BoxPos.Y + 1

            if onScreen and esp.enabled and esp.IsEnemy(i) then
                if esp.settings.name.enabled then
                    if not v.nameScreenGui then
                        v.nameScreenGui = Instance.new("ScreenGui")
                        v.nameScreenGui.Name = "ESPNameGui"
                        v.nameScreenGui.ResetOnSpawn = false
                        v.nameScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.nameScreenGui.Parent = game:GetService("CoreGui")
                        
                        local textLabel = Instance.new("TextLabel")
                        textLabel.Name = "NameText"
                        textLabel.Size = UDim2.new(0, 200, 0, 30)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        textLabel.TextStrokeTransparency = 1
                        textLabel.FontFace = Silk
                        textLabel.TextSize = 14
                        textLabel.Parent = v.nameScreenGui
                    end
                    
                    local textLabel = v.nameScreenGui:FindFirstChild("NameText")
                    if textLabel then
                        textLabel.Text = esp.settings.name.displaynames and i.DisplayName or i.Name
                        textLabel.TextColor3 = esp.settings.name.color
                        textLabel.Position = UDim2.new(0, BoxPos.X + BoxSize.X/2 - 100, 0, BoxPos.Y - 83)
                        v.nameScreenGui.Enabled = true
                    end
                elseif v.nameScreenGui then
                    v.nameScreenGui.Enabled = false
                end

                if esp.settings.distance.enabled and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    if not v.distanceScreenGui then
                        v.distanceScreenGui = Instance.new("ScreenGui")
                        v.distanceScreenGui.Name = "ESPDistanceGui"
                        v.distanceScreenGui.ResetOnSpawn = false
                        v.distanceScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.distanceScreenGui.Parent = game:GetService("CoreGui")
                        
                        local textLabel = Instance.new("TextLabel")
                        textLabel.Name = "DistanceText"
                        textLabel.Size = UDim2.new(0, 100, 0, 20)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        textLabel.TextStrokeTransparency = 1
                        textLabel.FontFace = Silk
                        textLabel.TextSize = 14
                        textLabel.Parent = v.distanceScreenGui
                    end
                    
                    local textLabel = v.distanceScreenGui:FindFirstChild("DistanceText")
                    if textLabel then
                        local distance = math.floor((hrp.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude)
                        textLabel.Text = distance .. "FT"
                        textLabel.TextColor3 = esp.settings.distance.color
                        textLabel.Position = UDim2.new(0, BoxPos.X + BoxSize.X - 27, 0, BoxPos.Y - 63)
                        local dynamicSize = math.clamp(Size * 1.3, 14, 14)
                        textLabel.TextSize = dynamicSize
                        v.distanceScreenGui.Enabled = true
                    end
                elseif v.distanceScreenGui then
                    v.distanceScreenGui.Enabled = false
                end

                if esp.settings.weapon.enabled then
                    if not v.weaponScreenGui then
                        v.weaponScreenGui = Instance.new("ScreenGui")
                        v.weaponScreenGui.Name = "ESPWeaponGui"
                        v.weaponScreenGui.ResetOnSpawn = false
                        v.weaponScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.weaponScreenGui.Parent = game:GetService("CoreGui")
                        
                        local textLabel = Instance.new("TextLabel")
                        textLabel.Name = "WeaponText"
                        textLabel.Size = UDim2.new(0, 100, 0, 20)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        textLabel.TextStrokeTransparency = 1
                        textLabel.FontFace = Silk
                        textLabel.TextSize = 14
                        textLabel.Parent = v.weaponScreenGui
                    end
                    
                    local textLabel = v.weaponScreenGui:FindFirstChild("WeaponText")
                    if textLabel then
                        local weaponName = esp.GetPlayerWeapon(i)
                        textLabel.Text = weaponName
                        textLabel.TextColor3 = esp.settings.weapon.color
                        textLabel.Position = UDim2.new(0, BoxPos.X + BoxSize.X/2 - 50, 0, BoxPos.Y + BoxSize.Y - 61)
                        local dynamicSize = math.clamp(Size * 1.3, 14, 14)
                        textLabel.TextSize = dynamicSize
                        v.weaponScreenGui.Enabled = true
                    end
                elseif v.weaponScreenGui then
                    v.weaponScreenGui.Enabled = false
                end

                if esp.settings.weaponicon.enabled then
                    if not v.weaponIconGui then
                        v.weaponIconGui = Instance.new("ScreenGui")
                        v.weaponIconGui.Name = "ESPWeaponIconGui"
                        v.weaponIconGui.ResetOnSpawn = false
                        v.weaponIconGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.weaponIconGui.Parent = game:GetService("CoreGui")
                        
                        local imageLabel = Instance.new("ImageLabel")
                        imageLabel.Name = "WeaponIcon"
                        imageLabel.Size = UDim2.new(0, esp.settings.weaponicon.size, 0, esp.settings.weaponicon.size)
                        imageLabel.BackgroundTransparency = 1
                        imageLabel.ImageColor3 = esp.settings.weaponicon.color
                        imageLabel.ScaleType = Enum.ScaleType.Fit
                        imageLabel.Parent = v.weaponIconGui
                    end
                    
                    local imageLabel = v.weaponIconGui:FindFirstChild("WeaponIcon")
                    if imageLabel then
                        local weaponName = esp.GetPlayerWeapon(i)
                        
                        if weaponName and weaponName ~= "None" then
                            local success, icon = pcall(function()
                                return GetIcon.getWeaponOfKiller(weaponName)
                            end)
                            
                            if success and icon then
                                imageLabel.Image = icon
                                imageLabel.Visible = true
                                
                                local iconYOffset = BoxPos.Y + BoxSize.Y - esp.settings.weaponicon.y_normal

                                if esp.settings.weapon.enabled then
                                    iconYOffset = BoxPos.Y + BoxSize.Y - esp.settings.weaponicon.y_withtext
                                end

                                imageLabel.Position = UDim2.new(
                                    0, 
                                    BoxPos.X + BoxSize.X/2 - esp.settings.weaponicon.size/2, 
                                    0, 
                                    iconYOffset
                                )
                                
                                imageLabel.Size = UDim2.new(0, esp.settings.weaponicon.size, 0, esp.settings.weaponicon.size)
                                imageLabel.ImageColor3 = esp.settings.weaponicon.color
                            else
                                imageLabel.Visible = false
                            end
                        else
                            imageLabel.Visible = false
                        end
                        
                        v.weaponIconGui.Enabled = true
                    end
                elseif v.weaponIconGui then
                    v.weaponIconGui.Enabled = false
                end

                if esp.settings.healthtext.enabled then
                    if not v.healthScreenGui then
                        v.healthScreenGui = Instance.new("ScreenGui")
                        v.healthScreenGui.Name = "ESPHealthGui"
                        v.healthScreenGui.ResetOnSpawn = false
                        v.healthScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.healthScreenGui.Parent = game:GetService("CoreGui")
                        
                        local textLabel = Instance.new("TextLabel")
                        textLabel.Name = "HealthText"
                        textLabel.Size = UDim2.new(0, 100, 0, 20)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        textLabel.TextStrokeTransparency = 1
                        textLabel.FontFace = Silk
                        textLabel.TextSize = 14
                        textLabel.Parent = v.healthScreenGui
                    end
                    
                    local textLabel = v.healthScreenGui:FindFirstChild("HealthText")
                    if textLabel then
                        textLabel.Text = tostring(math.floor((hum.Health / hum.MaxHealth) * 100 + 0.5)) .. "%"
                        textLabel.TextColor3 = esp.settings.healthtext.color
                        textLabel.Position = UDim2.new(0, BoxPos.X - 25, 0, BoxPos.Y + BoxSize.Y/2 - 84)
                        v.healthScreenGui.Enabled = true
                    end
                elseif v.healthScreenGui then
                    v.healthScreenGui.Enabled = false
                end

                if esp.settings.box.enabled then
                    v.boxOutline.Size = BoxSize
                    v.boxOutline.Position = BoxPos
                    v.boxOutline.Visible = false

                    v.box.Size = BoxSize
                    v.box.Position = BoxPos
                    v.box.Color = esp.settings.box.color
                    v.box.Transparency = esp.settings.box.transparency
                    v.box.Visible = true
                else
                    v.boxOutline.Visible = false
                    v.box.Visible = false
                end

                if esp.settings.boxfill.enabled then
                    if not esp.settings.boxfill.gradient.enabled then
                        v.boxfill.Position = BoxFillPos
                        v.boxfill.Size = BoxFillSize
                        v.boxfill.Visible = true
                        v.boxfill.Filled = true
                        v.boxfill.Color = esp.settings.boxfill.color
                        v.boxfill.Transparency = esp.settings.boxfill.transparency
                    else
                        v.boxfill.Visible = false
                    end
                    
                    if esp.settings.boxfill.gradient.enabled then
                        if not v.boxFillGui then
                            v.boxFillGui = Instance.new("ScreenGui")
                            v.boxFillGui.Name = "ESPBoxFillGradient_" .. i.Name
                            v.boxFillGui.ResetOnSpawn = false
                            v.boxFillGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            v.boxFillGui.Parent = game:GetService("CoreGui")
                            
                            local frame = Instance.new("Frame")
                            frame.Name = "BoxFillFrame"
                            frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            frame.BorderSizePixel = 0
                            frame.Parent = v.boxFillGui
                            
                            v.boxFillGradient = Instance.new("UIGradient")
                            v.boxFillGradient.Parent = frame
                        end
                        
                        v.boxFillGui.Enabled = true
                        local frame = v.boxFillGui:FindFirstChild("BoxFillFrame")
                        
                        if frame then
                            frame.Size = UDim2.new(0, BoxSize.X, 0, BoxSize.Y)
                            frame.Position = UDim2.new(0, BoxPos.X, 0, BoxPos.Y  - 58)
                            frame.BackgroundTransparency = 1 - esp.settings.boxfill.transparency
                            
                            v.boxFillGradient.Color = ColorSequence.new({
                                ColorSequenceKeypoint.new(0, esp.settings.boxfill.gradient.left),
                                ColorSequenceKeypoint.new(1, esp.settings.boxfill.gradient.right)
                            })
                            v.boxFillGradient.Rotation = 90
                        end
                    else
                        if v.boxFillGui then
                            v.boxFillGui:Destroy()
                            v.boxFillGui = nil
                            v.boxFillGradient = nil
                        end
                    end
                else
                    v.boxfill.Visible = false
                    v.boxfill.Filled = false
                    if v.boxFillGui then
                        v.boxFillGui:Destroy()
                        v.boxFillGui = nil
                        v.boxFillGradient = nil
                    end
                end

                if esp.settings.healthbar.enabled then
                    local healthPercentage = hum.Health / hum.MaxHealth
                    local barHeight = BoxSize.Y - 2.3
                    local barWidth = esp.settings.healthbar.thickness
                    local barX = BoxPos.X - 3 - barWidth
                    local barY = BoxPos.Y - 56

                    if not v.healthBarGui then
                        v.healthBarGui = Instance.new("ScreenGui")
                        v.healthBarGui.Name = "ESPHealthBar_" .. i.Name
                        v.healthBarGui.ResetOnSpawn = false
                        v.healthBarGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                        v.healthBarGui.Parent = game:GetService("CoreGui")

                        if esp.settings.healthbar.outline then
                            v.healthBarOutlineFrame = Instance.new("Frame")
                            v.healthBarOutlineFrame.Name = "HealthBarOutline"
                            v.healthBarOutlineFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                            v.healthBarOutlineFrame.BorderSizePixel = 0
                            v.healthBarOutlineFrame.Parent = v.healthBarGui
                        end

                        v.healthBarBackgroundFrame = Instance.new("Frame")
                        v.healthBarBackgroundFrame.Name = "HealthBarBackground"
                        v.healthBarBackgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        v.healthBarBackgroundFrame.BorderSizePixel = 0
                        v.healthBarBackgroundFrame.Parent = v.healthBarGui

                        v.healthBarFillFrame = Instance.new("Frame")
                        v.healthBarFillFrame.Name = "HealthBarFill"
                        v.healthBarFillFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        v.healthBarFillFrame.BorderSizePixel = 0
                        v.healthBarFillFrame.Parent = v.healthBarGui

                        v.healthBarGradient = Instance.new("UIGradient")
                        v.healthBarGradient.Parent = v.healthBarFillFrame
                    end

                    v.healthBarGui.Enabled = true

                    v.healthBarGradient.Enabled = true
                    v.healthBarGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, esp.settings.healthbar.gradient_bottom),
                        ColorSequenceKeypoint.new(1, esp.settings.healthbar.gradient_top)
                    })
                    v.healthBarFillFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    v.healthBarGradient.Rotation = 90

                    if esp.settings.healthbar.outline and v.healthBarOutlineFrame then
                        v.healthBarOutlineFrame.Size = UDim2.new(0, barWidth + 2, 0, barHeight + 2)
                        v.healthBarOutlineFrame.Position = UDim2.new(0, barX - 1, 0, barY - 1)
                        v.healthBarOutlineFrame.Visible = true
                    elseif v.healthBarOutlineFrame then
                        v.healthBarOutlineFrame.Visible = false
                    end

                    v.healthBarBackgroundFrame.Size = UDim2.new(0, barWidth, 0, barHeight)
                    v.healthBarBackgroundFrame.Position = UDim2.new(0, barX, 0, barY)

                    local fillHeight = math.max(1, barHeight * healthPercentage)
                    v.healthBarFillFrame.Size = UDim2.new(0, barWidth, 0, fillHeight)
                    v.healthBarFillFrame.Position = UDim2.new(0, barX, 0, barY + (barHeight - fillHeight))

                else
                    if v.healthBarGui then
                        v.healthBarGui:Destroy()
                        v.healthBarGui = nil
                        v.healthBarOutlineFrame = nil
                        v.healthBarBackgroundFrame = nil
                        v.healthBarFillFrame = nil
                        v.healthBarGradient = nil
                    end
                end

                if esp.settings.viewangle.enabled then
                    local fromHead = currentCamera:WorldToViewportPoint(head.CFrame.p)
                    local toPoint = currentCamera:WorldToViewportPoint((head.CFrame + (head.CFrame.lookVector * 10)).p)
                    v.viewAngle.From = Vec2(fromHead.X, fromHead.Y)
                    v.viewAngle.To = Vec2(toPoint.X, toPoint.Y)
                    v.viewAngle.Color = esp.settings.viewangle.color
                    v.viewAngle.Visible = true
                end

                if esp.settings.tracers.enabled then
                    local tracerStartPoint = Vec2(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y)
                    
                    if esp.settings.tracers.position == "Top" then
                        tracerStartPoint = Vec2(currentCamera.ViewportSize.X / 2, 0)
                    end
                    
                    local tracerEndPoint = Vec2(BoxPos.X + BoxSize.X / 2, BoxPos.Y + BoxSize.Y)
                    
                    if esp.settings.tracers.position == "Top" then
                        tracerEndPoint = Vec2(BoxPos.X + BoxSize.X / 2, BoxPos.Y)
                    end
                    
                    v.tracer.From = tracerStartPoint
                    v.tracer.To = tracerEndPoint
                    v.tracer.Color = esp.settings.tracers.color
                    
                    if esp.settings.tracers.fade then
                        local distance = (tracerStartPoint - tracerEndPoint).Magnitude
                        local maxDistance = currentCamera.ViewportSize.Y * 0.8
                        local transparency = math.clamp(distance / maxDistance, 0, 1)
                        v.tracer.Transparency = transparency
                    else
                        v.tracer.Transparency = 0
                    end
                    
                    v.tracer.Visible = true
                else
                    v.tracer.Visible = false
                end

            else
                v.name.Visible = false
                v.boxOutline.Visible = false
                v.box.Visible = false
                v.boxfill.Visible = false
                v.healthBarOutline.Visible = false
                v.healthBar.Visible = false
                v.healthBarOutline.Visible = false
                v.healthBarBackground.Visible = false  
                v.healthBarFill.Visible = false
                v.healthText.Visible = false
                v.distance.Visible = false
                v.weaponText.Visible = false
                v.viewAngle.Visible = false
                v.tracer.Visible = false
                if v.nameScreenGui then v.nameScreenGui.Enabled = false end
                if v.distanceScreenGui then v.distanceScreenGui.Enabled = false end
                if v.healthScreenGui then v.healthScreenGui.Enabled = false end
                if v.weaponScreenGui then v.weaponScreenGui.Enabled = false end
                if v.weaponIconGui then v.weaponIconGui.Enabled = false end
                if v.boxFillGui then v.boxFillGui.Enabled = false end
            end
        else
            v.name.Visible = false
            v.boxOutline.Visible = false
            v.box.Visible = false
            v.boxfill.Visible = false
            v.healthBarOutline.Visible = false
            v.healthBar.Visible = false
            v.healthBarOutline.Visible = false
            v.healthBarBackground.Visible = false  
            v.healthBarFill.Visible = false
            v.healthText.Visible = false
            v.distance.Visible = false
            v.weaponText.Visible = false
            v.viewAngle.Visible = false
            v.tracer.Visible = false
            if v.nameScreenGui then v.nameScreenGui.Enabled = false end
            if v.distanceScreenGui then v.distanceScreenGui.Enabled = false end
            if v.healthScreenGui then v.healthScreenGui.Enabled = false end
            if v.weaponScreenGui then v.weaponScreenGui.Enabled = false end
            if v.weaponIconGui then v.weaponIconGui.Enabled = false end
            if v.boxFillGui then v.boxFillGui.Enabled = false end
        end
    end

    if esp.settings.droppedweapons.enabled and debris and esp.settings.ammo.enabled then
        for weapon, weaponData in pairs(esp.weaponObjects) do
            if weapon and weapon:IsA("BasePart") and weapon.Parent == debris then
                if weapon.Name == "Model" then
                    weaponData.weaponScreenGui.Enabled = false
                    continue
                end
            
                local vector, onScreen = currentCamera:WorldToViewportPoint(weapon.Position)
                
                if onScreen then
                    weaponData.weaponText.Text = weapon.Name
                    weaponData.weaponText.TextColor3 = esp.settings.droppedweapons.color
                    weaponData.weaponText.Position = UDim2.new(0, vector.X - 50, 0, vector.Y - 70)
                    
                    local storedAmmo = weapon:FindFirstChild("StoredAmmo")
                    local ammo = weapon:FindFirstChild("Ammo")
                    
                    if storedAmmo and ammo then
                        weaponData.ammoText.Text = ammo.Value .. "/" .. storedAmmo.Value
                        weaponData.ammoText.TextColor3 = esp.settings.ammo.color
                        weaponData.ammoText.Position = UDim2.new(0, vector.X - 50, 0, vector.Y - 60)
                        weaponData.ammoText.Visible = true
                    else
                        weaponData.ammoText.Visible = false
                    end
                    
                    weaponData.weaponScreenGui.Enabled = true
                else
                    weaponData.weaponScreenGui.Enabled = false
                end
            else
                weaponData.weaponScreenGui.Enabled = false
            end
        end
    else
        for weapon, weaponData in pairs(esp.weaponObjects) do
            weaponData.weaponScreenGui.Enabled = false
        end
    end

    if skeletonESP.enabled then
        for _, player in pairs(players:GetPlayers()) do
            if player ~= localPlayer and esp.IsEnemy(player) then
                updateSkeleton(player)
            elseif skeletons[player] then
                removeSkeleton(skeletons[player])
                skeletons[player] = nil
            end
        end
    else
        for plr, skeleton in pairs(skeletons) do
            removeSkeleton(skeleton)
            skeletons[plr] = nil
        end
    end
end

function createSkeletonLine()
    local line = Drawing.new("Line")
    return line
end

function removeSkeleton(skeleton)
    for _, line in pairs(skeleton) do
        if line and line.Remove then
            line:Remove()
        end
    end
end

function updateSkeleton(plr)
    if not skeletonESP.enabled or not plr or not plr.Character then 
        if skeletons[plr] then
            removeSkeleton(skeletons[plr])
            skeletons[plr] = nil
        end
        return 
    end
    
    local character = plr.Character
    if not character:FindFirstChild("HumanoidRootPart") then return end

    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        if skeletons[plr] then
            removeSkeleton(skeletons[plr])
            skeletons[plr] = nil
        end
        return
    end

    if not skeletons[plr] then
        skeletons[plr] = {}
    end

    local skeleton = skeletons[plr]
    local joints = {}
    local connections = {}

    if humanoid.RigType == Enum.HumanoidRigType.R15 then
        joints = {
            ["Head"] = character:FindFirstChild("Head"),
            ["UpperTorso"] = character:FindFirstChild("UpperTorso"),
            ["LowerTorso"] = character:FindFirstChild("LowerTorso"),
            ["LeftUpperArm"] = character:FindFirstChild("LeftUpperArm"),
            ["LeftLowerArm"] = character:FindFirstChild("LeftLowerArm"),
            ["LeftHand"] = character:FindFirstChild("LeftHand"),
            ["RightUpperArm"] = character:FindFirstChild("RightUpperArm"),
            ["RightLowerArm"] = character:FindFirstChild("RightLowerArm"),
            ["RightHand"] = character:FindFirstChild("RightHand"),
            ["LeftUpperLeg"] = character:FindFirstChild("LeftUpperLeg"),
            ["LeftLowerLeg"] = character:FindFirstChild("LeftLowerLeg"),
            ["LeftFoot"] = character:FindFirstChild("LeftFoot"),
            ["RightUpperLeg"] = character:FindFirstChild("RightUpperLeg"),
            ["RightLowerLeg"] = character:FindFirstChild("RightLowerLeg"),
            ["RightFoot"] = character:FindFirstChild("RightFoot"),
        }
        
        connections = {
            { "Head", "UpperTorso" },
            { "UpperTorso", "LowerTorso" },
            { "LowerTorso", "LeftUpperLeg" },
            { "LeftUpperLeg", "LeftLowerLeg" },
            { "LeftLowerLeg", "LeftFoot" },
            { "LowerTorso", "RightUpperLeg" },
            { "RightUpperLeg", "RightLowerLeg" },
            { "RightLowerLeg", "RightFoot" },
            { "UpperTorso", "LeftUpperArm" },
            { "LeftUpperArm", "LeftLowerArm" },
            { "LeftLowerArm", "LeftHand" },
            { "UpperTorso", "RightUpperArm" },
            { "RightUpperArm", "RightLowerArm" },
            { "RightLowerArm", "RightHand" },
        }
    else
        joints = {
            ["Head"] = character:FindFirstChild("Head"),
            ["Torso"] = character:FindFirstChild("Torso"),
            ["LeftArm"] = character:FindFirstChild("Left Arm"),
            ["RightArm"] = character:FindFirstChild("Right Arm"),
            ["LeftLeg"] = character:FindFirstChild("Left Leg"),
            ["RightLeg"] = character:FindFirstChild("Right Leg"),
        }
        
        connections = {
            { "Head", "Torso" },
            { "Torso", "LeftArm" },
            { "Torso", "RightArm" },
            { "Torso", "LeftLeg" },
            { "Torso", "RightLeg" },
        }
    end

    for index, connection in ipairs(connections) do
        local jointA = joints[connection[1]]
        local jointB = joints[connection[2]]

        if jointA and jointB then
            local posA, onScreenA = currentCamera:WorldToViewportPoint(jointA.Position)
            local posB, onScreenB = currentCamera:WorldToViewportPoint(jointB.Position)

            local line = skeleton[index] or createSkeletonLine()
            skeleton[index] = line

            line.Color = skeletonESP.color
            line.Thickness = skeletonESP.thickness
            line.Transparency = skeletonESP.transparency

            if onScreenA and onScreenB then
                line.From = Vec2(posA.X, posA.Y)
                line.To = Vec2(posB.X, posB.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        elseif skeleton[index] then
            skeleton[index].Visible = false
        end
    end
end

local function Chams()
    if not Toggles.chams_enabled.Value then return end

    for _, player in next, players:GetPlayers() do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            
            if not (chams.teamcheck and player.Team == localPlayer.Team) then
                if chams.enabled then
                    for _, part in next, player.Character:GetChildren() do
                        if part:IsA("BasePart") and part.Transparency ~= 1 then
                            if chams.settings.fill.enabled and not part:FindFirstChild("ChamsFill") then
                                local chams_fill = Instance.new("BoxHandleAdornment", part)
                                chams_fill.Name = "ChamsFill"
                                chams_fill.AlwaysOnTop = true
                                chams_fill.ZIndex = 4
                                chams_fill.Adornee = part
                                chams_fill.Color3 = chams.settings.fill.color
                                chams_fill.Transparency = chams.settings.fill.transparency
                                chams_fill.Size = part.Size + Vector3.new(0.02, 0.02, 0.02)
                            elseif not chams.settings.fill.enabled and part:FindFirstChild("ChamsFill") then
                                part.ChamsFill:Destroy()
                            end
                            
                            if chams.settings.glow.enabled and not part:FindFirstChild("ChamsGlow") then
                                local chams_glow = Instance.new("BoxHandleAdornment", part)
                                chams_glow.Name = "ChamsGlow"
                                chams_glow.AlwaysOnTop = false
                                chams_glow.ZIndex = 3
                                chams_glow.Adornee = part
                                chams_glow.Color3 = chams.settings.glow.color
                                chams_glow.Transparency = chams.settings.glow.transparency
                                chams_glow.Size = part.Size + Vector3.new(0.13, 0.13, 0.13)
                            elseif not chams.settings.glow.enabled and part:FindFirstChild("ChamsGlow") then
                                part.ChamsGlow:Destroy()
                            end
                        end
                    end
                else
                    for _, part in next, player.Character:GetChildren() do
                        if part:IsA("BasePart") and part.Transparency ~= 1 then
                            if part:FindFirstChild("ChamsFill") then
                                part.ChamsFill:Destroy()
                            end
                            if part:FindFirstChild("ChamsGlow") then
                                part.ChamsGlow:Destroy()
                            end
                        end
                    end
                end
            else
                for _, part in next, player.Character:GetChildren() do
                    if part:IsA("BasePart") and part.Transparency ~= 1 then
                        if part:FindFirstChild("ChamsFill") then
                            part.ChamsFill:Destroy()
                        end
                        if part:FindFirstChild("ChamsGlow") then
                            part.ChamsGlow:Destroy()
                        end
                    end
                end
            end
        else
            if player.Character then
                for _, part in next, player.Character:GetChildren() do
                    if part:IsA("BasePart") and part.Transparency ~= 1 then
                        if part:FindFirstChild("ChamsFill") then
                            part.ChamsFill:Destroy()
                        end
                        if part:FindFirstChild("ChamsGlow") then
                            part.ChamsGlow:Destroy()
                        end
                    end
                end
            end
        end
    end
end

local function GlobalChams()
    if not Toggles.globalchams_enabled.Value then return end

    if not globalChams.enabled then
        return
    end
    
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    
    for _, player in pairs(Players:GetPlayers()) do
        if not player.Character then continue end
        
        local character = player.Character
        
        local shouldApply = false
        local chamColor = globalChams.enemyColor
        
        if player == localPlayer then
            if globalChams.me then
                shouldApply = true
                chamColor = globalChams.meColor
            end
        elseif player.Team == localPlayer.Team then
            if globalChams.team then
                shouldApply = true
                chamColor = globalChams.teamColor
            end
        else
            shouldApply = true
            chamColor = globalChams.enemyColor
        end
        
        if shouldApply then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Material = Enum.Material.Neon
                    part.Color = chamColor
                    part.Reflectance = 0
                end
            end
            
            local head = character:FindFirstChild("Head")
            if head then
                head.Transparency = 1
                local face = head:FindFirstChild("face")
                if face then
                    face:Destroy()
                end
                
                local cylinderHead = character:FindFirstChild("CylinderHead")
                if not cylinderHead then
                    cylinderHead = Instance.new("Part")
                    cylinderHead.Name = "CylinderHead"
                    cylinderHead.Shape = Enum.PartType.Cylinder
                    cylinderHead.Size = Vector3.new(0.8, 1, 1)
                    cylinderHead.Material = Enum.Material.Neon
                    cylinderHead.Color = chamColor
                    cylinderHead.Reflectance = 0
                    cylinderHead.CanCollide = false
                    cylinderHead.Parent = character
                    
                    local weld = Instance.new("Weld")
                    weld.Part0 = head
                    weld.Part1 = cylinderHead
                    weld.C0 = CFrame.new(0, -0.1, 0)
                    weld.Parent = cylinderHead
                    
                    cylinderHead.Orientation = Vector3.new(0, 0, 90)
                else
                    cylinderHead.Color = chamColor
                end
            end
            
            local playerFolder = workspace:FindFirstChild(player.Name)
            if playerFolder then
                for _, item in pairs(playerFolder:GetChildren()) do
                    if item:IsA("Shirt") or item:IsA("Pants") or item:IsA("Accessory") then
                        item:Destroy()
                    end
                end
                
                if playerFolder:FindFirstChild("BackC4") then
                    playerFolder.BackC4:Destroy()
                end
                
                local fakeHead = playerFolder:FindFirstChild("FakeHead")
                if fakeHead then
                    fakeHead.Transparency = 1
                    local fakeFace = fakeHead:FindFirstChild("face")
                    if fakeFace then
                        fakeFace:Destroy()
                    end
                end
                
                local leftHand = playerFolder:FindFirstChild("LeftHand")
                if leftHand then
                    for _, obj in pairs(leftHand:GetChildren()) do
                        if string.lower(obj.Name):find("glove") then
                            obj:Destroy()
                        end
                    end
                end
                
                local rightHand = playerFolder:FindFirstChild("RightHand")
                if rightHand then
                    for _, obj in pairs(rightHand:GetChildren()) do
                        if string.lower(obj.Name):find("glove") then
                            obj:Destroy()
                        end
                    end
                end
            end
        else
            local cylinderHead = character:FindFirstChild("CylinderHead")
            if cylinderHead then
                cylinderHead:Destroy()
            end
            
            local head = character:FindFirstChild("Head")
            if head then
                head.Transparency = 0
            end
        end
    end
end

local function createGrenadeESP()
    if not Toggles.grenade_esp_enabled.Value then return end

    local screenGui = PlayerGui:FindFirstChild("AllGrenadesESP")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "AllGrenadesESP"
        screenGui.IgnoreGuiInset = true
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.Parent = PlayerGui
    end
    return screenGui
end

local function createGrenadeCircle(grenadeId, screenGui)
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "GrenadeCircle_" .. grenadeId
    mainContainer.BackgroundTransparency = 1
    mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    mainContainer.Size = UDim2.new(0, grenadeESP.settings.circle.size, 0, grenadeESP.settings.circle.size)
    mainContainer.Visible = false
    
    local inner = Instance.new("Frame")
    inner.BackgroundColor3 = grenadeESP.settings.background.color
    inner.BackgroundTransparency = grenadeESP.settings.background.transparency
    inner.AnchorPoint = Vector2.new(0.5, 0.5)
    inner.Size = UDim2.new(1, 0, 1, 0)
    inner.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    local innerCorner = Instance.new("UICorner")
    innerCorner.CornerRadius = UDim.new(1, 0)
    innerCorner.Parent = inner
    
    if grenadeESP.settings.outline.enabled then
        local outline = Instance.new("UIStroke")
        outline.Name = "Outline"
        outline.Color = grenadeESP.settings.outline.color
        outline.Thickness = grenadeESP.settings.outline.thickness
        outline.Parent = inner
    end
    
    if grenadeESP.settings.icon.enabled then
        local icon = Instance.new("ImageLabel")
        icon.Name = "Icon"
        icon.BackgroundTransparency = 1
        icon.AnchorPoint = Vector2.new(0.5, 0.5)
        icon.Size = UDim2.new(grenadeESP.settings.icon.size, 0, grenadeESP.settings.icon.size, 0)
        icon.Position = UDim2.new(0.5, 0, 0.5, 0)
        icon.ScaleType = Enum.ScaleType.Fit
        icon.ImageColor3 = grenadeESP.settings.icon.color
        icon.Parent = inner
    end
    
    if grenadeESP.settings.text.enabled then
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = grenadeESP.settings.text.color
        nameLabel.TextSize = grenadeESP.settings.text.size
        nameLabel.Size = UDim2.new(2, 0, 0, grenadeESP.settings.text.size + 2)
        nameLabel.FontFace = Silk
        nameLabel.Position = UDim2.new(-0.5, 0, 1, 2)
        nameLabel.TextXAlignment = Enum.TextXAlignment.Center
        nameLabel.Parent = mainContainer
    end
    
    inner.Parent = mainContainer
    mainContainer.Parent = screenGui
    
    return mainContainer
end

local function findAllGrenades()
    local grenades = {}
    local debris = workspace:FindFirstChild("Debris")
    
    if debris then
        for _, child in pairs(debris:GetChildren()) do
            if child.Name == "Model" then
                local innerModel = child:FindFirstChild("Model")
                if innerModel then
                    table.insert(grenades, innerModel)
                end
            end
        end
    end
    
    return grenades
end

local function getGrenadeId(grenade)
    return tostring(grenade:GetDebugId())
end

local function getGrenadeType(grenade)
    local handle2 = grenade:FindFirstChild("Handle2")
    if handle2 and handle2:IsA("MeshPart") then
        local textureId = handle2.TextureID
        local textureString = tostring(textureId)
        local assetId = textureString:match("%d+")
        
        if assetId and grenadeTypes[assetId] then
            return grenadeTypes[assetId]
        end
    end
    return nil
end

local function GrenadeESP()
    if not grenadeESP.enabled then
        for grenadeId, mainContainer in pairs(grenadeCircles) do
            if mainContainer and mainContainer.Parent then
                mainContainer:Destroy()
            end
        end
        grenadeCircles = {}
        trackedGrenades = {}
        return
    end
    
    local screenGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("AllGrenadesESP")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "AllGrenadesESP"
        screenGui.IgnoreGuiInset = true
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    end
    
    local allGrenades = findAllGrenades()
    local camera = workspace.CurrentCamera
    
    local currentGrenadeIds = {}
    
    for _, grenade in ipairs(allGrenades) do
        local grenadeId = getGrenadeId(grenade)
        currentGrenadeIds[grenadeId] = true
        
        if not grenadeCircles[grenadeId] then
            grenadeCircles[grenadeId] = createGrenadeCircle(grenadeId, screenGui)
            trackedGrenades[grenadeId] = grenade
        end
        
        local mainContainer = grenadeCircles[grenadeId]
        local mainPart = grenade:FindFirstChildOfClass("BasePart") or grenade:FindFirstChildOfClass("MeshPart") or grenade
        
        if mainPart then
            local vector, inViewport = camera:WorldToViewportPoint(mainPart.Position)
            
            if inViewport then
                mainContainer.Position = UDim2.new(0, vector.X, 0, vector.Y)
                mainContainer.Visible = true
                
                local distance = (camera.CFrame.Position - mainPart.Position).Magnitude
                local scale = math.clamp(250 / distance, grenadeESP.settings.circle.scale_min, grenadeESP.settings.circle.scale_max)
                
                mainContainer.Size = UDim2.new(0, scale, 0, scale)
                
                local grenadeType = getGrenadeType(grenade)
                if grenadeType then
                    local nameLabel = mainContainer:FindFirstChild("NameLabel")
                    if nameLabel and grenadeESP.settings.text.enabled then
                        nameLabel.Text = grenadeType.name
                        nameLabel.TextColor3 = grenadeESP.settings.text.color
                        nameLabel.TextSize = grenadeESP.settings.text.size
                    end
                    
                    local inner = mainContainer:FindFirstChildOfClass("Frame")
                    if inner then
                        inner.BackgroundColor3 = grenadeESP.settings.background.color
                        
                        local outline = inner:FindFirstChild("Outline")
                        if outline then
                            outline.Color = grenadeESP.settings.outline.color
                            outline.Thickness = grenadeESP.settings.outline.thickness
                        end
                        
                        local icon = inner:FindFirstChild("Icon")
                        if icon and grenadeESP.settings.icon.enabled then
                            icon.Image = "rbxassetid://" .. grenadeType.icon
                            icon.Size = UDim2.new(grenadeType.iconScale * grenadeESP.settings.icon.size, 0, grenadeType.iconScale * grenadeESP.settings.icon.size, 0)
                            icon.ImageColor3 = grenadeESP.settings.icon.color
                        end
                    end
                end
            else
                mainContainer.Visible = false
            end
        end
    end
    
    for grenadeId, mainContainer in pairs(grenadeCircles) do
        if not currentGrenadeIds[grenadeId] then
            if mainContainer and mainContainer.Parent then
                mainContainer:Destroy()
            end
            grenadeCircles[grenadeId] = nil
            trackedGrenades[grenadeId] = nil
        end
    end
end

local ChamsSection = Tabs.Visuals:AddLeftGroupbox('Chams')

ChamsSection:AddToggle('RemoveGloves', {Text = 'Remove Gloves', Default = false})

ChamsSection:AddToggle('GunsNeonEnabled', {Text = 'Guns Neon', Default = false})

ChamsSection:AddToggle('GunsNeonColorToggle', {Text = 'Guns Neon Color', Default = false})
Toggles.GunsNeonColorToggle:AddColorPicker('GunsNeonColor', {
    Default = Color3.fromRGB(255, 0, 0),
    Title = 'Guns Neon Color'
})

function RemoveGlovesAndSleeves()
    if Toggles.RemoveGloves.Value then
        local arms = workspace.Camera:FindFirstChild("Arms")
        if arms then
            for _, armModel in ipairs(arms:GetChildren()) do
                if armModel:IsA("Model") then
                    local leftArm = armModel:FindFirstChild("Left Arm")
                    local rightArm = armModel:FindFirstChild("Right Arm")
                    
                    if leftArm then
                        local leftGlove = leftArm:FindFirstChild("Glove")
                        if leftGlove then leftGlove:Destroy() end
                        local leftSleeve = leftArm:FindFirstChild("Sleeve")
                        if leftSleeve then leftSleeve:Destroy() end
                    end
                    
                    if rightArm then
                        local rightGlove = rightArm:FindFirstChild("Glove")
                        if rightGlove then rightGlove:Destroy() end
                        local rightSleeve = rightArm:FindFirstChild("Sleeve")
                        if rightSleeve then rightSleeve:Destroy() end
                    end
                end
            end
        end
    end
end

originalTextures = {}

function ApplyGunsNeon()
    local arms = workspace.Camera:FindFirstChild("Arms")
    if not arms then return end

    for _, part in ipairs(arms:GetChildren()) do
        if part:IsA("MeshPart") or part:IsA("BasePart") then
            if Toggles.GunsNeonEnabled.Value then
                if part:IsA("MeshPart") and not originalTextures[part] then
                    originalTextures[part] = part.TextureID
                end
                if part:IsA("MeshPart") then
                    part.TextureID = ""
                end
                part.Material = Enum.Material.Neon
                part.Color = Options.GunsNeonColor.Value
            else
                if part:IsA("MeshPart") and originalTextures[part] then
                    part.TextureID = originalTextures[part]
                end
                part.Material = Enum.Material.Plastic
                part.Color = Color3.fromRGB(200, 200, 200)
            end
        end
    end
end

Toggles.GunsNeonEnabled:OnChanged(ApplyGunsNeon)
Options.GunsNeonColor:OnChanged(function()
    if Toggles.GunsNeonEnabled.Value then
        ApplyGunsNeon()
    end
end)

ChamsSection:AddToggle('ArmHighlightEnabled', {Text = 'Arm Highlight', Default = false})

ChamsSection:AddSlider('ArmHighlightTransparency', {
    Text = 'Highlight Transparency',
    Default = 0,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Suffix = ''
})

ChamsSection:AddToggle('ArmHighlightColorToggle', {Text = 'Highlight Color', Default = false})
Toggles.ArmHighlightColorToggle:AddColorPicker('ArmHighlightColor', {
    Default = Color3.fromRGB(0, 191, 255),
    Title = 'Highlight Color'
})

ChamsSection:AddToggle('ArmHighlightOutlineColorToggle', {Text = 'Outline Color', Default = false})
Toggles.ArmHighlightOutlineColorToggle:AddColorPicker('ArmHighlightOutlineColor', {
    Default = Color3.fromRGB(255, 255, 255),
    Title = 'Outline Color'
})

armHighlights = {}

function ApplyArmHighlight()
    local arms = workspace.Camera:FindFirstChild("Arms")
    if not arms then return end

    for _, armModel in ipairs(arms:GetChildren()) do
        if armModel:IsA("Model") then
            local leftArm = armModel:FindFirstChild("Left Arm") or armModel:FindFirstChild("LeftArm")
            local rightArm = armModel:FindFirstChild("Right Arm") or armModel:FindFirstChild("RightArm")
            
            if not leftArm then
                for _, part in ipairs(armModel:GetChildren()) do
                    if part:IsA("BasePart") and part.Name:find("Left") then
                        leftArm = part
                        break
                    end
                end
            end
            
            if not rightArm then
                for _, part in ipairs(armModel:GetChildren()) do
                    if part:IsA("BasePart") and part.Name:find("Right") then
                        rightArm = part
                        break
                    end
                end
            end
            
            local armsToProcess = {}
            if leftArm then table.insert(armsToProcess, leftArm) end
            if rightArm then table.insert(armsToProcess, rightArm) end
            
            for _, arm in ipairs(armsToProcess) do
                if arm:IsA("BasePart") then
                    if Toggles.ArmHighlightEnabled.Value then
                        if not armHighlights[arm] then
                            local highlight = Instance.new("Highlight")
                            highlight.Name = "ArmESPHighlight"
                            highlight.DepthMode = Enum.HighlightDepthMode.Occluded
                            highlight.Parent = arm
                            armHighlights[arm] = highlight
                        end
                        
                        local highlight = armHighlights[arm]
                        highlight.Enabled = true
                        highlight.FillColor = Options.ArmHighlightColor.Value
                        highlight.OutlineColor = Options.ArmHighlightOutlineColor.Value
                        highlight.FillTransparency = Options.ArmHighlightTransparency.Value
                        highlight.OutlineTransparency = 0
                        
                    else
                        if armHighlights[arm] then
                            armHighlights[arm].Enabled = false
                        end
                    end
                end
            end
        end
    end
end

Toggles.ArmHighlightEnabled:OnChanged(ApplyArmHighlight)
Options.ArmHighlightColor:OnChanged(ApplyArmHighlight)
Options.ArmHighlightOutlineColor:OnChanged(ApplyArmHighlight)
Options.ArmHighlightTransparency:OnChanged(ApplyArmHighlight)

game:GetService("RunService").RenderStepped:Connect(function()
    RemoveGlovesAndSleeves()
    ApplyGunsNeon()
    ApplyArmHighlight()
end)

function updateTrail()
    if not trailEnabled or not IsAlive(localPlayer) then
        for _, point in pairs(trailPoints) do
            if point and point.Parent then
                point:Destroy()
            end
        end
        trailPoints = {}
        lastTrailPosition = nil
        return
    end
    
    local character = localPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    local leftLeg = character and character:FindFirstChild("LeftLowerLeg") or character:FindFirstChild("Left Leg")
    local rightLeg = character and character:FindFirstChild("RightLowerLeg") or character:FindFirstChild("Right Leg")
    
    if not rootPart then return end
    
    local legPos = rootPart.Position - Vector3.new(0, 2, 0)
    
    if leftLeg then
        legPos = leftLeg.Position
    elseif rightLeg then
        legPos = rightLeg.Position
    end
    
    local trailPoint = Instance.new("Part")
    trailPoint.Name = "MicroTrailPoint"
    trailPoint.Shape = Enum.PartType.Ball
    trailPoint.Size = Vector3.new(trailSize, trailSize, trailSize)
    trailPoint.Material = Enum.Material.Neon
    trailPoint.Color = trailColor
    trailPoint.Transparency = trailTransparency
    trailPoint.Anchored = true
    trailPoint.CanCollide = false
    trailPoint.Position = legPos
    trailPoint.Parent = workspace
    
    table.insert(trailPoints, trailPoint)
    
    delay(trailLifetime, function()
        if trailPoint and trailPoint.Parent then
            trailPoint:Destroy()
        end
        for i, point in ipairs(trailPoints) do
            if point == trailPoint then
                table.remove(trailPoints, i)
                break
            end
        end
    end)
end

function Movement()
    if not Toggles.mov_bhop.Value and not Toggles.mov_edgebug.Value and 
       not Toggles.mov_graph.Value then return end

    if Toggles.mov_bhop.Value then
        if localPlayer.PlayerGui.GUI.Main.GlobalChat.Visible == false then
            if IsAlive(localPlayer) and userInput:IsKeyDown(Enum.KeyCode.Space) then
                localPlayer.Character.Humanoid.Jump = true
                local speed = Options.mov_bhopspeed.Value
                local dir = currentCamera.CFrame.LookVector * Vec3(1,0,1)
                local move = Vec3()
                move = userInput:IsKeyDown(Enum.KeyCode.W) and move + dir or move
                move = userInput:IsKeyDown(Enum.KeyCode.S) and move - dir or move
                move = userInput:IsKeyDown(Enum.KeyCode.D) and move + Vec3(-dir.Z,0,dir.X) or move
                move = userInput:IsKeyDown(Enum.KeyCode.A) and move + Vec3(dir.Z,0,-dir.X) or move
                if move.Unit.X == move.Unit.X then
                    move = move.Unit
                    localPlayer.Character.HumanoidRootPart.Velocity = Vec3(move.X * speed, localPlayer.Character.HumanoidRootPart.Velocity.Y, move.Z * speed)
                end
            end
        end
    end
    
    if IsAlive(localPlayer) then
        local currentState = localPlayer.Character.Humanoid:GetState()
        if currentState == Enum.HumanoidStateType.Landed and userInput:IsKeyDown(Enum.KeyCode.Space) and Toggles.mov_bhop.Value then
            localPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
        
        if Toggles.mov_edgebug.Value and not ebCooldown and isButtonDown(Enum.KeyCode[Options.mov_edgebugbind.Value]) and IsAlive(localPlayer) then
            if oldState == Enum.HumanoidStateType.Freefall and currentState == Enum.HumanoidStateType.Landed then
                ebCooldown = true
                ebtxt.Visible = true
                local dir = localPlayer.Character.HumanoidRootPart.Velocity
                for i=1,5 do wait()
                    localPlayer.Character.HumanoidRootPart.Velocity = (Vec3(1.2,0,1.2) * dir) - Vec3(0,15,0)
                end
                wait()
                localPlayer.Character.HumanoidRootPart.Velocity = localPlayer.Character.HumanoidRootPart.Velocity * Vec3(1.8, 5, 1.8)
                spawn(function()
                    if Toggles.mov_edgebugsound.Value == true then
                        local ebsound = Instance.new("Sound")
                        ebsound.Parent = game:GetService("SoundService")
                        ebsound.SoundId = "rbxassetid://"..ebsfx
                        ebsound.Volume = 3
                        ebsound:Play()
                    else
                        print("no")
                    end
                    
                    if Toggles.mov_edgebugchat.Value == true then
                        getsenv(localPlayer.PlayerGui.GUI.Main.Chats.DisplayChat).moveOldMessages()
                        getsenv(localPlayer.PlayerGui.GUI.Main.Chats.DisplayChat).createNewMessage(
                            "enternalcheats",
                            "edgebugged",
                            C3(2, 103, 172), 
                            Color3.new(1,1,1),
                            .01)
                    end
                    
                    ebcount = ebcount + 1
                    ebcounter.Text = "eb: "..ebcount..""
                    wait(0.075)
                    ebCooldown = false
                    ebtxt.Visible = false
                end)
                print(ebCooldown)
            end
        end
        oldState = currentState
    end
    
    if not Toggles.mov_graph.Value then
        for i,v in ipairs(graphLines) do
            v:Remove()
            table.remove(graphLines, i)
        end
        VelocityCounter.Visible = false
    end
end

function Misc() 
    if Toggles.misc_oldsounds.Value then
        pcall(function()
            local equippedTool = localPlayer.Character.EquippedTool
            if equippedTool then
                if equippedTool.Name == "AK47" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://1112730119"
                elseif equippedTool.Name == "M4A1" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://1665639883"
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://2515498997"
                elseif equippedTool.Name == "Glock" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://1112951656"
                elseif equippedTool.Name == "Galil" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://344800912"
                elseif equippedTool.Name == "USP" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://1112952739"
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://2515499360"
                elseif equippedTool.Name == "P2000" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://263589107"
                elseif equippedTool.Name == "P250" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://340365431"
                elseif equippedTool.Name == "DesertEagle" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://202918645"
                elseif equippedTool.Name == "MP9" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://222888810"
                elseif equippedTool.Name == "UMP" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://206953341"
                elseif equippedTool.Name == "Famas" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://206953280"
                elseif equippedTool.Name == "Scout" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://1112858108"
                elseif equippedTool.Name == "AUG" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://515215839"
                elseif equippedTool.Name == "AWP" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://202918637"
                elseif equippedTool.Name == "G3SG1" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://340365815"
                elseif equippedTool.Name == "SG" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://347270113"
                elseif equippedTool.Name == "M4A4" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://202918741"
                elseif equippedTool.Name == "Tec9" then
                    localPlayer.Character.Gun.Shoot.SoundId = "rbxassetid://206953317"
                end
            end
        end)
    end
end

function KillAll()
    if not Toggles.kill_all.Value then return end
    if Toggles.kill_all.Value and localPlayer.Character and localPlayer.Character:FindFirstChild("UpperTorso") and localPlayer.Character:FindFirstChild("Gun") then
        for _, Player in pairs(players:GetPlayers()) do
            if Player and Player.Character and Player.Character:FindFirstChild("Head") and Player.Team ~= localPlayer.Team then
                game:GetService("ReplicatedStorage").Events.HitPart:FireServer(
                    Player.Character.Head,
                    {X = 0/0, Y = 0/0, Z = 0/0},
                    "AWP",
                    1000000,
                    localPlayer.Character.Gun,
                    nil,
                    1000000,
                    false,
                    false,
                    Vector3.new(),
                    1000000,
                    Vector3.new(),
                    true,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil,
                    nil
                )
            end
        end
    end
end

function FakeLag()
    if not fakelagEnabled and not pingSpikeActive then return end
    local shouldFakeLag = fakelagEnabled and IsAlive(localPlayer)
    local shouldPingSpike = pingSpikeActive and IsAlive(localPlayer)
    
    if shouldFakeLag then
        LagTick = math.clamp(LagTick + 1, 0, Options.fakelag_limit.Value)
        
        local targetTick = Options.fakelag_mode.Value == "Static" and Options.fakelag_limit.Value or math.random(1, Options.fakelag_limit.Value)
        
        if LagTick == targetTick then
            game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
            FakelagFolder:ClearAllChildren()
            LagTick = 0
            
            if Toggles.fakelag_visualize and Toggles.fakelag_visualize.Value then
                for _, part in pairs(localPlayer.Character:GetChildren()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        local lagPart = Instance.new("Part")
                        lagPart.CFrame = part.CFrame
                        lagPart.Anchored = true
                        lagPart.CanCollide = false
                        lagPart.Material = Enum.Material.ForceField
                        lagPart.Color = Options.fakelag_visualize_color.Value
                        lagPart.Name = part.Name
                        lagPart.Transparency = 0.97
                        lagPart.Size = part.Size
                        lagPart.Parent = FakelagFolder
                        
                        delay(2, function()
                            if lagPart and lagPart.Parent then
                                lagPart:Destroy()
                            end
                        end)
                    end
                end
            end
        else
            game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1)
        end
    else
        FakelagFolder:ClearAllChildren()
        game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
        LagTick = 0
    end
    
    if shouldPingSpike then
        for i = 1, 3 do
            pcall(function()
                game:GetService("ReplicatedStorage").Events.RemoteEvent:FireServer({
                    [1] = "createparticle", 
                    [2] = "bullethole", 
                    [3] = localPlayer.Character.Head, 
                    [4] = Vector3.new(0, 0, 0)
                })
            end)
        end
    end
end

function UpdateLagVisualization()
    if not Toggles.lagvis_enabled.Value then return end
    if not Toggles.lagvis_enabled.Value then
        for player, visual in pairs(lagVisuals) do
            if visual.parts then
                for _, part in pairs(visual.parts) do
                    if part and part.Parent then
                        part:Destroy()
                    end
                end
            end
        end
        lagVisuals = {}
        return
    end

    for player, visual in pairs(lagVisuals) do
        if not players:FindFirstChild(player.Name) then
            if visual.parts then
                for _, part in pairs(visual.parts) do
                    if part and part.Parent then
                        part:Destroy()
                    end
                end
            end
            lagVisuals[player] = nil
        end
    end

    for _, player in pairs(players:GetPlayers()) do
        if not player.Character then continue end
        
        local shouldShow = false
        local color = C3(255, 255, 255)
        
        if player == localPlayer and Toggles.lagvis_me.Value then
            shouldShow = true
            color = Options.lagvis_me_color.Value
        elseif player.Team == localPlayer.Team and Toggles.lagvis_team.Value then
            shouldShow = true
            color = Options.lagvis_team_color.Value
        elseif player.Team ~= localPlayer.Team and Toggles.lagvis_enemy.Value then
            shouldShow = true
            color = Options.lagvis_enemy_color.Value
        end
        
        if shouldShow then
            local ping = playerPingData[player] or math.random(20, 150)
            local delayFactor = math.clamp(ping / 200, 0.1, 0.8)
            
            if not lagVisuals[player] then
                lagVisuals[player] = {parts = {}, lastUpdate = 0}
            end
            
            local visual = lagVisuals[player]
            
            if tick() - visual.lastUpdate > delayFactor then
                visual.lastUpdate = tick()
                
                for _, part in pairs(visual.parts) do
                    if part and part.Parent then
                        part:Destroy()
                    end
                end
                visual.parts = {}
                
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        local lagPart = Instance.new("Part")
                        lagPart.Name = "LagVisual_" .. player.Name
                        lagPart.Size = part.Size
                        lagPart.CFrame = part.CFrame
                        lagPart.Anchored = true
                        lagPart.CanCollide = false
                        lagPart.Material = Enum.Material.Neon
                        lagPart.Color = color
                        lagPart.Transparency = 0.97
                        
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = color
                        highlight.OutlineColor = color
                        highlight.FillTransparency = 0.9
                        highlight.OutlineTransparency = 0.8
                        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        highlight.Parent = lagPart
                        
                        lagPart.Parent = workspace
                        table.insert(visual.parts, lagPart)
                    end
                end
            end
        else
            if lagVisuals[player] then
                for _, part in pairs(lagVisuals[player].parts) do
                    if part and part.Parent then
                        part:Destroy()
                    end
                end
                lagVisuals[player] = nil
            end
        end
    end
end

function NoLegAnimation()
    if not Toggles.misc_no_leg_anim.Value or not IsAlive(localPlayer) then
        return
    end
    
    local character = localPlayer.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.AutoRotate = true
            
            local animateScript = character:FindFirstChild("Animate")
            if animateScript then
                local walkAnimation = animateScript:FindFirstChild("walk")
                if walkAnimation then
                    walkAnimation:Destroy()
                end
                
                local runAnimation = animateScript:FindFirstChild("run") 
                if runAnimation then
                    runAnimation:Destroy()
                end

                local jumpAnimation = animateScript:FindFirstChild("jump")
                if jumpAnimation then
                    jumpAnimation:Destroy()
                end

                local fallAnimation = animateScript:FindFirstChild("fall")
                if fallAnimation then
                    fallAnimation:Destroy()
                end

                local climbAnimation = animateScript:FindFirstChild("climb")
                if climbAnimation then
                    climbAnimation:Destroy()
                end
            end
            
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation then
                    local animName = track.Animation.Name:lower()
                    if animName:find("walk") or animName:find("run") or animName:find("leg") or 
                       animName:find("jump") or animName:find("fall") or animName:find("climb") then
                        track:Stop()
                    end
                end
            end

            for _, motor in pairs(character:GetDescendants()) do
                if motor:IsA("Motor6D") and (motor.Name == "Left Hip" or motor.Name == "Right Hip" or 
                   motor.Name == "Left Knee" or motor.Name == "Right Knee" or
                   motor.Name:find("Leg")) then
                    if motor.Name == "Left Hip" or motor.Name == "Right Hip" then
                        motor.C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
                    elseif motor.Name == "Left Knee" or motor.Name == "Right Knee" then
                        motor.C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
                    end
                end
            end
        end
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if Toggles.as_enabled.Value or Toggles.aim_Enabled.Value then
        Combat()
    end
    
    if Toggles.wrl_ambient.Value or Toggles.wrl_forcetime.Value or 
       Toggles.cam_fovenabled.Value or Toggles.wrl_saturation.Value or
       Toggles.wrl_atmosphere.Value then
        Visuals()
    end
    
    if Toggles.espenabled.Value then
        ESP()
    end
    
    if Toggles.chams_enabled.Value then
        Chams()
    end
    
    if Toggles.globalchams_enabled.Value then
        GlobalChams()
    end
    
    if Toggles.grenade_esp_enabled.Value then
        GrenadeESP()
    end
    
    if Toggles.mov_bhop.Value or Toggles.mov_edgebug.Value or Toggles.mov_graph.Value then
        Movement()
    end
    
    if Toggles.kill_all.Value then
        KillAll()
    end
    
    if fakelagEnabled or pingSpikeActive then
        FakeLag()
    end
    
    if Toggles.lagvis_enabled.Value then
        UpdateLagVisualization()
    end
    
    if grenadeVisualizer.enabled then
        HEVisualizer()
    end
end)

runService.RenderStepped:Connect(function()
    do Misc() end
    do NoLegAnimation() end
    do
        if antiaim.enabled and IsAlive(localPlayer) then
            local root = localPlayer.Character.HumanoidRootPart
            local humanoid = localPlayer.Character.Humanoid
            local camLook = currentCamera.CFrame.LookVector
            
            if root and humanoid then
                humanoid.AutoRotate = false
                
                local currentTime = tick()
                if currentTime - antiaim.last_jitter_time >= (Options.antiaim_jitter_speed.Value / 1000) then
                    antiaim.jitter_toggle = not antiaim.jitter_toggle
                    antiaim.last_jitter_time = currentTime
                end
                
                antiaim.spin_angle = antiaim.spin_angle + math.rad(Options.antiaim_spin_speed.Value * 0.1)
                if antiaim.spin_angle > math.rad(360) then
                    antiaim.spin_angle = 0
                end
                
                local angle = -math.atan2(camLook.Z, camLook.X) + math.rad(-90)
                
                if Options.antiaim_yaw_base.Value == "Spin" then
                    angle = angle + antiaim.spin_angle
                elseif Options.antiaim_yaw_base.Value == "Random" then
                    angle = angle + math.rad(math.random(0, 360))
                elseif Options.antiaim_yaw_base.Value == "Backward" then
                    angle = angle + math.rad(180)
                elseif Options.antiaim_yaw_base.Value == "Targets" then
                    local closestPart = nil
                    local closestDistance = 9999
                    
                    for _, player in pairs(players:GetPlayers()) do
                        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and 
                           player.Character.Humanoid.Health > 0 and player.Team ~= localPlayer.Team then
                            local pos, onScreen = currentCamera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
                            local mousePos = userInput:GetMouseLocation()
                            local distance = (Vector2.new(pos.X, pos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
                            
                            if distance < closestDistance then
                                closestPart = player.Character.HumanoidRootPart
                                closestDistance = distance
                            end
                        end
                    end
                    
                    if closestPart then
                        angle = -math.atan2(
                            (closestPart.Position - root.Position).Z, 
                            (closestPart.Position - root.Position).X
                        ) + math.rad(-90)
                    end
                end
                
                local jitterOffset = Toggles.antiaim_jitter.Value and antiaim.jitter_toggle and Options.antiaim_jitter_offset.Value or 0
                local offset = math.rad(-Options.antiaim_yaw_offset.Value - jitterOffset)
                
                local cframePos = CFrame.new(root.Position) * CFrame.Angles(0, angle + offset, 0)
                
                if Options.antiaim_body_roll.Value == "180" then
                    cframePos = cframePos * CFrame.Angles(math.rad(180), 0, 0)
                    humanoid.HipHeight = 4
                else
                    humanoid.HipHeight = 2
                end
                
                root.CFrame = cframePos
                
                local pitch = camLook.Y
                if Options.antiaim_pitch.Value == "Up" then
                    pitch = 1
                elseif Options.antiaim_pitch.Value == "Down" then
                    pitch = -1
                elseif Options.antiaim_pitch.Value == "Zero" then
                    pitch = 0
                elseif Options.antiaim_pitch.Value == "Random" then
                    pitch = math.random(-10, 10) / 10
                end
                
                if Toggles.antiaim_extend_pitch.Value and (Options.antiaim_pitch.Value == "Up" or Options.antiaim_pitch.Value == "Down") then
                    pitch = (pitch * 2) / 1.6
                end
                
                pcall(function()
                    game.ReplicatedStorage.Events.ControlTurn:FireServer(
                        pitch, 
                        localPlayer.Character:FindFirstChild("Climbing") and true or false
                    )
                end)
            end
        elseif IsAlive(localPlayer) then
            localPlayer.Character.Humanoid.AutoRotate = true
            localPlayer.Character.Humanoid.HipHeight = 2
            
            pcall(function()
                game.ReplicatedStorage.Events.ControlTurn:FireServer(
                    currentCamera.CFrame.LookVector.Y,
                    localPlayer.Character:FindFirstChild("Climbing") and true or false
                )
            end)
        end
    end
end)

lighting.Ambient = Color3.fromRGB(104, 110, 120)
lighting.OutdoorAmbient = Color3.fromRGB(0, 0, 0)
lighting.TimeOfDay = 14

if atmosphere then atmosphere.Parent = nil end
if saturationeffect then saturationeffect.Parent = nil end
if Blur then Blur.Parent = nil end
if game.Lighting:FindFirstChild("pepsisky") then
    game.Lighting.pepsisky:Destroy()
end

function CleanupGlobalChams()
    local Players = game:GetService("Players")
    
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local cylinderHead = player.Character:FindFirstChild("CylinderHead")
            if cylinderHead then
                cylinderHead:Destroy()
            end
            
            local head = player.Character:FindFirstChild("Head")
            if head then
                head.Transparency = 0
            end
            
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Material = Enum.Material.Plastic
                end
            end
        end
    end
end

Library:Notify('Finished Loading!');
Library:Notify("Took to load "..string.format("%.5f", tick() - LoadingTime).." seconds.");
